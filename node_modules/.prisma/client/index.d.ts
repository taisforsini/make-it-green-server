
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model avalia__o
 * 
 */
export type avalia__o = {
  idAvalia__o: number
  notaAvaliacao: string | null
  comentarioAvaliacao: string | null
  Comprador_idComprador: number
  Comprador_Usuario_idUsuario: number
  Produto_idProduto: number
  Produto_Vendedor_idVendedor: number
  Produto_Comprador_idComprador: number
  Produto_Comprador_Usuario_idUsuario: number
}

/**
 * Model carrinho
 * 
 */
export type carrinho = {
  idcarrinho: number
  idUsuario: number
  idProduto: number
  quantidade: number
}

/**
 * Model comprador
 * 
 */
export type comprador = {
  idComprador: number
  cpfcnpjComprador: string
  nomeComprador: string
  Usuario_idUsuario: number
}

/**
 * Model entrega
 * 
 */
export type entrega = {
  idEntrega: number
  prazoEntrega: string | null
  statusEntrega: string
  Pagamento_idPagamento: number
}

/**
 * Model pagamento
 * 
 */
export type pagamento = {
  idPagamento: number
  valorPagamento: string
  formaPagamento: string
  statusPagamento: string
  Comprador_idComprador: number
  Comprador_Usuario_idUsuario: number
}

/**
 * Model produto
 * 
 */
export type produto = {
  idProduto: number
  compensa_aoProduto: string
  descProduto: string | null
  categoriaProduto: string | null
  precoProduto: string
  Vendedor_idVendedor: number
  quantidadeVendida: number | null
  createdAt: Date
}

/**
 * Model usuario
 * 
 */
export type usuario = {
  idUsuario: number
  nomeUsuario: string
  emailUsuario: string
  cpfUsuario: string
}

/**
 * Model vendedor
 * 
 */
export type vendedor = {
  idVendedor: number
  razaosocialVendedor: string
  Usuario_idUsuario: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Avalia__os
 * const avalia__os = await prisma.avalia__o.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Avalia__os
   * const avalia__os = await prisma.avalia__o.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.avalia__o`: Exposes CRUD operations for the **avalia__o** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avalia__os
    * const avalia__os = await prisma.avalia__o.findMany()
    * ```
    */
  get avalia__o(): Prisma.avalia__oDelegate<GlobalReject>;

  /**
   * `prisma.carrinho`: Exposes CRUD operations for the **carrinho** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carrinhos
    * const carrinhos = await prisma.carrinho.findMany()
    * ```
    */
  get carrinho(): Prisma.carrinhoDelegate<GlobalReject>;

  /**
   * `prisma.comprador`: Exposes CRUD operations for the **comprador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compradors
    * const compradors = await prisma.comprador.findMany()
    * ```
    */
  get comprador(): Prisma.compradorDelegate<GlobalReject>;

  /**
   * `prisma.entrega`: Exposes CRUD operations for the **entrega** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entregas
    * const entregas = await prisma.entrega.findMany()
    * ```
    */
  get entrega(): Prisma.entregaDelegate<GlobalReject>;

  /**
   * `prisma.pagamento`: Exposes CRUD operations for the **pagamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pagamentos
    * const pagamentos = await prisma.pagamento.findMany()
    * ```
    */
  get pagamento(): Prisma.pagamentoDelegate<GlobalReject>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.produtoDelegate<GlobalReject>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<GlobalReject>;

  /**
   * `prisma.vendedor`: Exposes CRUD operations for the **vendedor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendedors
    * const vendedors = await prisma.vendedor.findMany()
    * ```
    */
  get vendedor(): Prisma.vendedorDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    avalia__o: 'avalia__o',
    carrinho: 'carrinho',
    comprador: 'comprador',
    entrega: 'entrega',
    pagamento: 'pagamento',
    produto: 'produto',
    usuario: 'usuario',
    vendedor: 'vendedor'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompradorCountOutputType
   */


  export type CompradorCountOutputType = {
    pagamento: number
  }

  export type CompradorCountOutputTypeSelect = {
    pagamento?: boolean
  }

  export type CompradorCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CompradorCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CompradorCountOutputType
    : S extends undefined
    ? never
    : S extends CompradorCountOutputTypeArgs
    ?'include' extends U
    ? CompradorCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CompradorCountOutputType ? CompradorCountOutputType[P] : never
  } 
    : CompradorCountOutputType
  : CompradorCountOutputType




  // Custom InputTypes

  /**
   * CompradorCountOutputType without action
   */
  export type CompradorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompradorCountOutputType
     * 
    **/
    select?: CompradorCountOutputTypeSelect | null
  }



  /**
   * Count Type PagamentoCountOutputType
   */


  export type PagamentoCountOutputType = {
    entrega: number
  }

  export type PagamentoCountOutputTypeSelect = {
    entrega?: boolean
  }

  export type PagamentoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PagamentoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PagamentoCountOutputType
    : S extends undefined
    ? never
    : S extends PagamentoCountOutputTypeArgs
    ?'include' extends U
    ? PagamentoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PagamentoCountOutputType ? PagamentoCountOutputType[P] : never
  } 
    : PagamentoCountOutputType
  : PagamentoCountOutputType




  // Custom InputTypes

  /**
   * PagamentoCountOutputType without action
   */
  export type PagamentoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PagamentoCountOutputType
     * 
    **/
    select?: PagamentoCountOutputTypeSelect | null
  }



  /**
   * Count Type ProdutoCountOutputType
   */


  export type ProdutoCountOutputType = {
    carrinho: number
  }

  export type ProdutoCountOutputTypeSelect = {
    carrinho?: boolean
  }

  export type ProdutoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProdutoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProdutoCountOutputType
    : S extends undefined
    ? never
    : S extends ProdutoCountOutputTypeArgs
    ?'include' extends U
    ? ProdutoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProdutoCountOutputType ? ProdutoCountOutputType[P] : never
  } 
    : ProdutoCountOutputType
  : ProdutoCountOutputType




  // Custom InputTypes

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     * 
    **/
    select?: ProdutoCountOutputTypeSelect | null
  }



  /**
   * Count Type UsuarioCountOutputType
   */


  export type UsuarioCountOutputType = {
    comprador: number
    vendedor: number
  }

  export type UsuarioCountOutputTypeSelect = {
    comprador?: boolean
    vendedor?: boolean
  }

  export type UsuarioCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsuarioCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsuarioCountOutputType
    : S extends undefined
    ? never
    : S extends UsuarioCountOutputTypeArgs
    ?'include' extends U
    ? UsuarioCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsuarioCountOutputType ? UsuarioCountOutputType[P] : never
  } 
    : UsuarioCountOutputType
  : UsuarioCountOutputType




  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     * 
    **/
    select?: UsuarioCountOutputTypeSelect | null
  }



  /**
   * Count Type VendedorCountOutputType
   */


  export type VendedorCountOutputType = {
    produto: number
  }

  export type VendedorCountOutputTypeSelect = {
    produto?: boolean
  }

  export type VendedorCountOutputTypeGetPayload<
    S extends boolean | null | undefined | VendedorCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? VendedorCountOutputType
    : S extends undefined
    ? never
    : S extends VendedorCountOutputTypeArgs
    ?'include' extends U
    ? VendedorCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof VendedorCountOutputType ? VendedorCountOutputType[P] : never
  } 
    : VendedorCountOutputType
  : VendedorCountOutputType




  // Custom InputTypes

  /**
   * VendedorCountOutputType without action
   */
  export type VendedorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VendedorCountOutputType
     * 
    **/
    select?: VendedorCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model avalia__o
   */


  export type AggregateAvalia__o = {
    _count: Avalia__oCountAggregateOutputType | null
    _avg: Avalia__oAvgAggregateOutputType | null
    _sum: Avalia__oSumAggregateOutputType | null
    _min: Avalia__oMinAggregateOutputType | null
    _max: Avalia__oMaxAggregateOutputType | null
  }

  export type Avalia__oAvgAggregateOutputType = {
    idAvalia__o: number | null
    Comprador_idComprador: number | null
    Comprador_Usuario_idUsuario: number | null
    Produto_idProduto: number | null
    Produto_Vendedor_idVendedor: number | null
    Produto_Comprador_idComprador: number | null
    Produto_Comprador_Usuario_idUsuario: number | null
  }

  export type Avalia__oSumAggregateOutputType = {
    idAvalia__o: number | null
    Comprador_idComprador: number | null
    Comprador_Usuario_idUsuario: number | null
    Produto_idProduto: number | null
    Produto_Vendedor_idVendedor: number | null
    Produto_Comprador_idComprador: number | null
    Produto_Comprador_Usuario_idUsuario: number | null
  }

  export type Avalia__oMinAggregateOutputType = {
    idAvalia__o: number | null
    notaAvaliacao: string | null
    comentarioAvaliacao: string | null
    Comprador_idComprador: number | null
    Comprador_Usuario_idUsuario: number | null
    Produto_idProduto: number | null
    Produto_Vendedor_idVendedor: number | null
    Produto_Comprador_idComprador: number | null
    Produto_Comprador_Usuario_idUsuario: number | null
  }

  export type Avalia__oMaxAggregateOutputType = {
    idAvalia__o: number | null
    notaAvaliacao: string | null
    comentarioAvaliacao: string | null
    Comprador_idComprador: number | null
    Comprador_Usuario_idUsuario: number | null
    Produto_idProduto: number | null
    Produto_Vendedor_idVendedor: number | null
    Produto_Comprador_idComprador: number | null
    Produto_Comprador_Usuario_idUsuario: number | null
  }

  export type Avalia__oCountAggregateOutputType = {
    idAvalia__o: number
    notaAvaliacao: number
    comentarioAvaliacao: number
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
    Produto_idProduto: number
    Produto_Vendedor_idVendedor: number
    Produto_Comprador_idComprador: number
    Produto_Comprador_Usuario_idUsuario: number
    _all: number
  }


  export type Avalia__oAvgAggregateInputType = {
    idAvalia__o?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
    Produto_idProduto?: true
    Produto_Vendedor_idVendedor?: true
    Produto_Comprador_idComprador?: true
    Produto_Comprador_Usuario_idUsuario?: true
  }

  export type Avalia__oSumAggregateInputType = {
    idAvalia__o?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
    Produto_idProduto?: true
    Produto_Vendedor_idVendedor?: true
    Produto_Comprador_idComprador?: true
    Produto_Comprador_Usuario_idUsuario?: true
  }

  export type Avalia__oMinAggregateInputType = {
    idAvalia__o?: true
    notaAvaliacao?: true
    comentarioAvaliacao?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
    Produto_idProduto?: true
    Produto_Vendedor_idVendedor?: true
    Produto_Comprador_idComprador?: true
    Produto_Comprador_Usuario_idUsuario?: true
  }

  export type Avalia__oMaxAggregateInputType = {
    idAvalia__o?: true
    notaAvaliacao?: true
    comentarioAvaliacao?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
    Produto_idProduto?: true
    Produto_Vendedor_idVendedor?: true
    Produto_Comprador_idComprador?: true
    Produto_Comprador_Usuario_idUsuario?: true
  }

  export type Avalia__oCountAggregateInputType = {
    idAvalia__o?: true
    notaAvaliacao?: true
    comentarioAvaliacao?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
    Produto_idProduto?: true
    Produto_Vendedor_idVendedor?: true
    Produto_Comprador_idComprador?: true
    Produto_Comprador_Usuario_idUsuario?: true
    _all?: true
  }

  export type Avalia__oAggregateArgs = {
    /**
     * Filter which avalia__o to aggregate.
     * 
    **/
    where?: avalia__oWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avalia__os to fetch.
     * 
    **/
    orderBy?: Enumerable<avalia__oOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: avalia__oWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avalia__os from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avalia__os.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned avalia__os
    **/
    _count?: true | Avalia__oCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Avalia__oAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Avalia__oSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Avalia__oMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Avalia__oMaxAggregateInputType
  }

  export type GetAvalia__oAggregateType<T extends Avalia__oAggregateArgs> = {
        [P in keyof T & keyof AggregateAvalia__o]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvalia__o[P]>
      : GetScalarType<T[P], AggregateAvalia__o[P]>
  }




  export type Avalia__oGroupByArgs = {
    where?: avalia__oWhereInput
    orderBy?: Enumerable<avalia__oOrderByWithAggregationInput>
    by: Array<Avalia__oScalarFieldEnum>
    having?: avalia__oScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Avalia__oCountAggregateInputType | true
    _avg?: Avalia__oAvgAggregateInputType
    _sum?: Avalia__oSumAggregateInputType
    _min?: Avalia__oMinAggregateInputType
    _max?: Avalia__oMaxAggregateInputType
  }


  export type Avalia__oGroupByOutputType = {
    idAvalia__o: number
    notaAvaliacao: string | null
    comentarioAvaliacao: string | null
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
    Produto_idProduto: number
    Produto_Vendedor_idVendedor: number
    Produto_Comprador_idComprador: number
    Produto_Comprador_Usuario_idUsuario: number
    _count: Avalia__oCountAggregateOutputType | null
    _avg: Avalia__oAvgAggregateOutputType | null
    _sum: Avalia__oSumAggregateOutputType | null
    _min: Avalia__oMinAggregateOutputType | null
    _max: Avalia__oMaxAggregateOutputType | null
  }

  type GetAvalia__oGroupByPayload<T extends Avalia__oGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Avalia__oGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Avalia__oGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Avalia__oGroupByOutputType[P]>
            : GetScalarType<T[P], Avalia__oGroupByOutputType[P]>
        }
      >
    >


  export type avalia__oSelect = {
    idAvalia__o?: boolean
    notaAvaliacao?: boolean
    comentarioAvaliacao?: boolean
    Comprador_idComprador?: boolean
    Comprador_Usuario_idUsuario?: boolean
    Produto_idProduto?: boolean
    Produto_Vendedor_idVendedor?: boolean
    Produto_Comprador_idComprador?: boolean
    Produto_Comprador_Usuario_idUsuario?: boolean
  }

  export type avalia__oGetPayload<
    S extends boolean | null | undefined | avalia__oArgs,
    U = keyof S
      > = S extends true
        ? avalia__o
    : S extends undefined
    ? never
    : S extends avalia__oArgs | avalia__oFindManyArgs
    ?'include' extends U
    ? avalia__o 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof avalia__o ? avalia__o[P] : never
  } 
    : avalia__o
  : avalia__o


  type avalia__oCountArgs = Merge<
    Omit<avalia__oFindManyArgs, 'select' | 'include'> & {
      select?: Avalia__oCountAggregateInputType | true
    }
  >

  export interface avalia__oDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Avalia__o that matches the filter.
     * @param {avalia__oFindUniqueArgs} args - Arguments to find a Avalia__o
     * @example
     * // Get one Avalia__o
     * const avalia__o = await prisma.avalia__o.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends avalia__oFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, avalia__oFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'avalia__o'> extends True ? CheckSelect<T, Prisma__avalia__oClient<avalia__o>, Prisma__avalia__oClient<avalia__oGetPayload<T>>> : CheckSelect<T, Prisma__avalia__oClient<avalia__o | null >, Prisma__avalia__oClient<avalia__oGetPayload<T> | null >>

    /**
     * Find the first Avalia__o that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avalia__oFindFirstArgs} args - Arguments to find a Avalia__o
     * @example
     * // Get one Avalia__o
     * const avalia__o = await prisma.avalia__o.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends avalia__oFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, avalia__oFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'avalia__o'> extends True ? CheckSelect<T, Prisma__avalia__oClient<avalia__o>, Prisma__avalia__oClient<avalia__oGetPayload<T>>> : CheckSelect<T, Prisma__avalia__oClient<avalia__o | null >, Prisma__avalia__oClient<avalia__oGetPayload<T> | null >>

    /**
     * Find zero or more Avalia__os that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avalia__oFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avalia__os
     * const avalia__os = await prisma.avalia__o.findMany()
     * 
     * // Get first 10 Avalia__os
     * const avalia__os = await prisma.avalia__o.findMany({ take: 10 })
     * 
     * // Only select the `idAvalia__o`
     * const avalia__oWithIdAvalia__oOnly = await prisma.avalia__o.findMany({ select: { idAvalia__o: true } })
     * 
    **/
    findMany<T extends avalia__oFindManyArgs>(
      args?: SelectSubset<T, avalia__oFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<avalia__o>>, PrismaPromise<Array<avalia__oGetPayload<T>>>>

    /**
     * Create a Avalia__o.
     * @param {avalia__oCreateArgs} args - Arguments to create a Avalia__o.
     * @example
     * // Create one Avalia__o
     * const Avalia__o = await prisma.avalia__o.create({
     *   data: {
     *     // ... data to create a Avalia__o
     *   }
     * })
     * 
    **/
    create<T extends avalia__oCreateArgs>(
      args: SelectSubset<T, avalia__oCreateArgs>
    ): CheckSelect<T, Prisma__avalia__oClient<avalia__o>, Prisma__avalia__oClient<avalia__oGetPayload<T>>>

    /**
     * Create many Avalia__os.
     *     @param {avalia__oCreateManyArgs} args - Arguments to create many Avalia__os.
     *     @example
     *     // Create many Avalia__os
     *     const avalia__o = await prisma.avalia__o.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends avalia__oCreateManyArgs>(
      args?: SelectSubset<T, avalia__oCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Avalia__o.
     * @param {avalia__oDeleteArgs} args - Arguments to delete one Avalia__o.
     * @example
     * // Delete one Avalia__o
     * const Avalia__o = await prisma.avalia__o.delete({
     *   where: {
     *     // ... filter to delete one Avalia__o
     *   }
     * })
     * 
    **/
    delete<T extends avalia__oDeleteArgs>(
      args: SelectSubset<T, avalia__oDeleteArgs>
    ): CheckSelect<T, Prisma__avalia__oClient<avalia__o>, Prisma__avalia__oClient<avalia__oGetPayload<T>>>

    /**
     * Update one Avalia__o.
     * @param {avalia__oUpdateArgs} args - Arguments to update one Avalia__o.
     * @example
     * // Update one Avalia__o
     * const avalia__o = await prisma.avalia__o.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends avalia__oUpdateArgs>(
      args: SelectSubset<T, avalia__oUpdateArgs>
    ): CheckSelect<T, Prisma__avalia__oClient<avalia__o>, Prisma__avalia__oClient<avalia__oGetPayload<T>>>

    /**
     * Delete zero or more Avalia__os.
     * @param {avalia__oDeleteManyArgs} args - Arguments to filter Avalia__os to delete.
     * @example
     * // Delete a few Avalia__os
     * const { count } = await prisma.avalia__o.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends avalia__oDeleteManyArgs>(
      args?: SelectSubset<T, avalia__oDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avalia__os.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avalia__oUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avalia__os
     * const avalia__o = await prisma.avalia__o.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends avalia__oUpdateManyArgs>(
      args: SelectSubset<T, avalia__oUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Avalia__o.
     * @param {avalia__oUpsertArgs} args - Arguments to update or create a Avalia__o.
     * @example
     * // Update or create a Avalia__o
     * const avalia__o = await prisma.avalia__o.upsert({
     *   create: {
     *     // ... data to create a Avalia__o
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avalia__o we want to update
     *   }
     * })
    **/
    upsert<T extends avalia__oUpsertArgs>(
      args: SelectSubset<T, avalia__oUpsertArgs>
    ): CheckSelect<T, Prisma__avalia__oClient<avalia__o>, Prisma__avalia__oClient<avalia__oGetPayload<T>>>

    /**
     * Count the number of Avalia__os.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avalia__oCountArgs} args - Arguments to filter Avalia__os to count.
     * @example
     * // Count the number of Avalia__os
     * const count = await prisma.avalia__o.count({
     *   where: {
     *     // ... the filter for the Avalia__os we want to count
     *   }
     * })
    **/
    count<T extends avalia__oCountArgs>(
      args?: Subset<T, avalia__oCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Avalia__oCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avalia__o.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Avalia__oAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Avalia__oAggregateArgs>(args: Subset<T, Avalia__oAggregateArgs>): PrismaPromise<GetAvalia__oAggregateType<T>>

    /**
     * Group by Avalia__o.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Avalia__oGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Avalia__oGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Avalia__oGroupByArgs['orderBy'] }
        : { orderBy?: Avalia__oGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Avalia__oGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvalia__oGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for avalia__o.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__avalia__oClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * avalia__o findUnique
   */
  export type avalia__oFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the avalia__o
     * 
    **/
    select?: avalia__oSelect | null
    /**
     * Throw an Error if a avalia__o can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which avalia__o to fetch.
     * 
    **/
    where: avalia__oWhereUniqueInput
  }


  /**
   * avalia__o findFirst
   */
  export type avalia__oFindFirstArgs = {
    /**
     * Select specific fields to fetch from the avalia__o
     * 
    **/
    select?: avalia__oSelect | null
    /**
     * Throw an Error if a avalia__o can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which avalia__o to fetch.
     * 
    **/
    where?: avalia__oWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avalia__os to fetch.
     * 
    **/
    orderBy?: Enumerable<avalia__oOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for avalia__os.
     * 
    **/
    cursor?: avalia__oWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avalia__os from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avalia__os.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of avalia__os.
     * 
    **/
    distinct?: Enumerable<Avalia__oScalarFieldEnum>
  }


  /**
   * avalia__o findMany
   */
  export type avalia__oFindManyArgs = {
    /**
     * Select specific fields to fetch from the avalia__o
     * 
    **/
    select?: avalia__oSelect | null
    /**
     * Filter, which avalia__os to fetch.
     * 
    **/
    where?: avalia__oWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avalia__os to fetch.
     * 
    **/
    orderBy?: Enumerable<avalia__oOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing avalia__os.
     * 
    **/
    cursor?: avalia__oWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avalia__os from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avalia__os.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Avalia__oScalarFieldEnum>
  }


  /**
   * avalia__o create
   */
  export type avalia__oCreateArgs = {
    /**
     * Select specific fields to fetch from the avalia__o
     * 
    **/
    select?: avalia__oSelect | null
    /**
     * The data needed to create a avalia__o.
     * 
    **/
    data: XOR<avalia__oCreateInput, avalia__oUncheckedCreateInput>
  }


  /**
   * avalia__o createMany
   */
  export type avalia__oCreateManyArgs = {
    /**
     * The data used to create many avalia__os.
     * 
    **/
    data: Enumerable<avalia__oCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * avalia__o update
   */
  export type avalia__oUpdateArgs = {
    /**
     * Select specific fields to fetch from the avalia__o
     * 
    **/
    select?: avalia__oSelect | null
    /**
     * The data needed to update a avalia__o.
     * 
    **/
    data: XOR<avalia__oUpdateInput, avalia__oUncheckedUpdateInput>
    /**
     * Choose, which avalia__o to update.
     * 
    **/
    where: avalia__oWhereUniqueInput
  }


  /**
   * avalia__o updateMany
   */
  export type avalia__oUpdateManyArgs = {
    /**
     * The data used to update avalia__os.
     * 
    **/
    data: XOR<avalia__oUpdateManyMutationInput, avalia__oUncheckedUpdateManyInput>
    /**
     * Filter which avalia__os to update
     * 
    **/
    where?: avalia__oWhereInput
  }


  /**
   * avalia__o upsert
   */
  export type avalia__oUpsertArgs = {
    /**
     * Select specific fields to fetch from the avalia__o
     * 
    **/
    select?: avalia__oSelect | null
    /**
     * The filter to search for the avalia__o to update in case it exists.
     * 
    **/
    where: avalia__oWhereUniqueInput
    /**
     * In case the avalia__o found by the `where` argument doesn't exist, create a new avalia__o with this data.
     * 
    **/
    create: XOR<avalia__oCreateInput, avalia__oUncheckedCreateInput>
    /**
     * In case the avalia__o was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<avalia__oUpdateInput, avalia__oUncheckedUpdateInput>
  }


  /**
   * avalia__o delete
   */
  export type avalia__oDeleteArgs = {
    /**
     * Select specific fields to fetch from the avalia__o
     * 
    **/
    select?: avalia__oSelect | null
    /**
     * Filter which avalia__o to delete.
     * 
    **/
    where: avalia__oWhereUniqueInput
  }


  /**
   * avalia__o deleteMany
   */
  export type avalia__oDeleteManyArgs = {
    /**
     * Filter which avalia__os to delete
     * 
    **/
    where?: avalia__oWhereInput
  }


  /**
   * avalia__o without action
   */
  export type avalia__oArgs = {
    /**
     * Select specific fields to fetch from the avalia__o
     * 
    **/
    select?: avalia__oSelect | null
  }



  /**
   * Model carrinho
   */


  export type AggregateCarrinho = {
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  export type CarrinhoAvgAggregateOutputType = {
    idcarrinho: number | null
    idUsuario: number | null
    idProduto: number | null
    quantidade: number | null
  }

  export type CarrinhoSumAggregateOutputType = {
    idcarrinho: number | null
    idUsuario: number | null
    idProduto: number | null
    quantidade: number | null
  }

  export type CarrinhoMinAggregateOutputType = {
    idcarrinho: number | null
    idUsuario: number | null
    idProduto: number | null
    quantidade: number | null
  }

  export type CarrinhoMaxAggregateOutputType = {
    idcarrinho: number | null
    idUsuario: number | null
    idProduto: number | null
    quantidade: number | null
  }

  export type CarrinhoCountAggregateOutputType = {
    idcarrinho: number
    idUsuario: number
    idProduto: number
    quantidade: number
    _all: number
  }


  export type CarrinhoAvgAggregateInputType = {
    idcarrinho?: true
    idUsuario?: true
    idProduto?: true
    quantidade?: true
  }

  export type CarrinhoSumAggregateInputType = {
    idcarrinho?: true
    idUsuario?: true
    idProduto?: true
    quantidade?: true
  }

  export type CarrinhoMinAggregateInputType = {
    idcarrinho?: true
    idUsuario?: true
    idProduto?: true
    quantidade?: true
  }

  export type CarrinhoMaxAggregateInputType = {
    idcarrinho?: true
    idUsuario?: true
    idProduto?: true
    quantidade?: true
  }

  export type CarrinhoCountAggregateInputType = {
    idcarrinho?: true
    idUsuario?: true
    idProduto?: true
    quantidade?: true
    _all?: true
  }

  export type CarrinhoAggregateArgs = {
    /**
     * Filter which carrinho to aggregate.
     * 
    **/
    where?: carrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carrinhos to fetch.
     * 
    **/
    orderBy?: Enumerable<carrinhoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: carrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carrinhos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carrinhos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned carrinhos
    **/
    _count?: true | CarrinhoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarrinhoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarrinhoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarrinhoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarrinhoMaxAggregateInputType
  }

  export type GetCarrinhoAggregateType<T extends CarrinhoAggregateArgs> = {
        [P in keyof T & keyof AggregateCarrinho]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarrinho[P]>
      : GetScalarType<T[P], AggregateCarrinho[P]>
  }




  export type CarrinhoGroupByArgs = {
    where?: carrinhoWhereInput
    orderBy?: Enumerable<carrinhoOrderByWithAggregationInput>
    by: Array<CarrinhoScalarFieldEnum>
    having?: carrinhoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarrinhoCountAggregateInputType | true
    _avg?: CarrinhoAvgAggregateInputType
    _sum?: CarrinhoSumAggregateInputType
    _min?: CarrinhoMinAggregateInputType
    _max?: CarrinhoMaxAggregateInputType
  }


  export type CarrinhoGroupByOutputType = {
    idcarrinho: number
    idUsuario: number
    idProduto: number
    quantidade: number
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  type GetCarrinhoGroupByPayload<T extends CarrinhoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CarrinhoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarrinhoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
            : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
        }
      >
    >


  export type carrinhoSelect = {
    idcarrinho?: boolean
    idUsuario?: boolean
    idProduto?: boolean
    quantidade?: boolean
    produto?: boolean | produtoArgs
  }

  export type carrinhoInclude = {
    produto?: boolean | produtoArgs
  }

  export type carrinhoGetPayload<
    S extends boolean | null | undefined | carrinhoArgs,
    U = keyof S
      > = S extends true
        ? carrinho
    : S extends undefined
    ? never
    : S extends carrinhoArgs | carrinhoFindManyArgs
    ?'include' extends U
    ? carrinho  & {
    [P in TrueKeys<S['include']>]:
        P extends 'produto' ? produtoGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'produto' ? produtoGetPayload<S['select'][P]> :  P extends keyof carrinho ? carrinho[P] : never
  } 
    : carrinho
  : carrinho


  type carrinhoCountArgs = Merge<
    Omit<carrinhoFindManyArgs, 'select' | 'include'> & {
      select?: CarrinhoCountAggregateInputType | true
    }
  >

  export interface carrinhoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Carrinho that matches the filter.
     * @param {carrinhoFindUniqueArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends carrinhoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, carrinhoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'carrinho'> extends True ? CheckSelect<T, Prisma__carrinhoClient<carrinho>, Prisma__carrinhoClient<carrinhoGetPayload<T>>> : CheckSelect<T, Prisma__carrinhoClient<carrinho | null >, Prisma__carrinhoClient<carrinhoGetPayload<T> | null >>

    /**
     * Find the first Carrinho that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carrinhoFindFirstArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends carrinhoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, carrinhoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'carrinho'> extends True ? CheckSelect<T, Prisma__carrinhoClient<carrinho>, Prisma__carrinhoClient<carrinhoGetPayload<T>>> : CheckSelect<T, Prisma__carrinhoClient<carrinho | null >, Prisma__carrinhoClient<carrinhoGetPayload<T> | null >>

    /**
     * Find zero or more Carrinhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carrinhoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carrinhos
     * const carrinhos = await prisma.carrinho.findMany()
     * 
     * // Get first 10 Carrinhos
     * const carrinhos = await prisma.carrinho.findMany({ take: 10 })
     * 
     * // Only select the `idcarrinho`
     * const carrinhoWithIdcarrinhoOnly = await prisma.carrinho.findMany({ select: { idcarrinho: true } })
     * 
    **/
    findMany<T extends carrinhoFindManyArgs>(
      args?: SelectSubset<T, carrinhoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<carrinho>>, PrismaPromise<Array<carrinhoGetPayload<T>>>>

    /**
     * Create a Carrinho.
     * @param {carrinhoCreateArgs} args - Arguments to create a Carrinho.
     * @example
     * // Create one Carrinho
     * const Carrinho = await prisma.carrinho.create({
     *   data: {
     *     // ... data to create a Carrinho
     *   }
     * })
     * 
    **/
    create<T extends carrinhoCreateArgs>(
      args: SelectSubset<T, carrinhoCreateArgs>
    ): CheckSelect<T, Prisma__carrinhoClient<carrinho>, Prisma__carrinhoClient<carrinhoGetPayload<T>>>

    /**
     * Create many Carrinhos.
     *     @param {carrinhoCreateManyArgs} args - Arguments to create many Carrinhos.
     *     @example
     *     // Create many Carrinhos
     *     const carrinho = await prisma.carrinho.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends carrinhoCreateManyArgs>(
      args?: SelectSubset<T, carrinhoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Carrinho.
     * @param {carrinhoDeleteArgs} args - Arguments to delete one Carrinho.
     * @example
     * // Delete one Carrinho
     * const Carrinho = await prisma.carrinho.delete({
     *   where: {
     *     // ... filter to delete one Carrinho
     *   }
     * })
     * 
    **/
    delete<T extends carrinhoDeleteArgs>(
      args: SelectSubset<T, carrinhoDeleteArgs>
    ): CheckSelect<T, Prisma__carrinhoClient<carrinho>, Prisma__carrinhoClient<carrinhoGetPayload<T>>>

    /**
     * Update one Carrinho.
     * @param {carrinhoUpdateArgs} args - Arguments to update one Carrinho.
     * @example
     * // Update one Carrinho
     * const carrinho = await prisma.carrinho.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends carrinhoUpdateArgs>(
      args: SelectSubset<T, carrinhoUpdateArgs>
    ): CheckSelect<T, Prisma__carrinhoClient<carrinho>, Prisma__carrinhoClient<carrinhoGetPayload<T>>>

    /**
     * Delete zero or more Carrinhos.
     * @param {carrinhoDeleteManyArgs} args - Arguments to filter Carrinhos to delete.
     * @example
     * // Delete a few Carrinhos
     * const { count } = await prisma.carrinho.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends carrinhoDeleteManyArgs>(
      args?: SelectSubset<T, carrinhoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carrinhoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carrinhos
     * const carrinho = await prisma.carrinho.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends carrinhoUpdateManyArgs>(
      args: SelectSubset<T, carrinhoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Carrinho.
     * @param {carrinhoUpsertArgs} args - Arguments to update or create a Carrinho.
     * @example
     * // Update or create a Carrinho
     * const carrinho = await prisma.carrinho.upsert({
     *   create: {
     *     // ... data to create a Carrinho
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carrinho we want to update
     *   }
     * })
    **/
    upsert<T extends carrinhoUpsertArgs>(
      args: SelectSubset<T, carrinhoUpsertArgs>
    ): CheckSelect<T, Prisma__carrinhoClient<carrinho>, Prisma__carrinhoClient<carrinhoGetPayload<T>>>

    /**
     * Count the number of Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carrinhoCountArgs} args - Arguments to filter Carrinhos to count.
     * @example
     * // Count the number of Carrinhos
     * const count = await prisma.carrinho.count({
     *   where: {
     *     // ... the filter for the Carrinhos we want to count
     *   }
     * })
    **/
    count<T extends carrinhoCountArgs>(
      args?: Subset<T, carrinhoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarrinhoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarrinhoAggregateArgs>(args: Subset<T, CarrinhoAggregateArgs>): PrismaPromise<GetCarrinhoAggregateType<T>>

    /**
     * Group by Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarrinhoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarrinhoGroupByArgs['orderBy'] }
        : { orderBy?: CarrinhoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarrinhoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarrinhoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for carrinho.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__carrinhoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    produto<T extends produtoArgs = {}>(args?: Subset<T, produtoArgs>): CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * carrinho findUnique
   */
  export type carrinhoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the carrinho
     * 
    **/
    select?: carrinhoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: carrinhoInclude | null
    /**
     * Throw an Error if a carrinho can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which carrinho to fetch.
     * 
    **/
    where: carrinhoWhereUniqueInput
  }


  /**
   * carrinho findFirst
   */
  export type carrinhoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the carrinho
     * 
    **/
    select?: carrinhoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: carrinhoInclude | null
    /**
     * Throw an Error if a carrinho can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which carrinho to fetch.
     * 
    **/
    where?: carrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carrinhos to fetch.
     * 
    **/
    orderBy?: Enumerable<carrinhoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carrinhos.
     * 
    **/
    cursor?: carrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carrinhos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carrinhos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carrinhos.
     * 
    **/
    distinct?: Enumerable<CarrinhoScalarFieldEnum>
  }


  /**
   * carrinho findMany
   */
  export type carrinhoFindManyArgs = {
    /**
     * Select specific fields to fetch from the carrinho
     * 
    **/
    select?: carrinhoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: carrinhoInclude | null
    /**
     * Filter, which carrinhos to fetch.
     * 
    **/
    where?: carrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carrinhos to fetch.
     * 
    **/
    orderBy?: Enumerable<carrinhoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing carrinhos.
     * 
    **/
    cursor?: carrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carrinhos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carrinhos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CarrinhoScalarFieldEnum>
  }


  /**
   * carrinho create
   */
  export type carrinhoCreateArgs = {
    /**
     * Select specific fields to fetch from the carrinho
     * 
    **/
    select?: carrinhoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: carrinhoInclude | null
    /**
     * The data needed to create a carrinho.
     * 
    **/
    data: XOR<carrinhoCreateInput, carrinhoUncheckedCreateInput>
  }


  /**
   * carrinho createMany
   */
  export type carrinhoCreateManyArgs = {
    /**
     * The data used to create many carrinhos.
     * 
    **/
    data: Enumerable<carrinhoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * carrinho update
   */
  export type carrinhoUpdateArgs = {
    /**
     * Select specific fields to fetch from the carrinho
     * 
    **/
    select?: carrinhoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: carrinhoInclude | null
    /**
     * The data needed to update a carrinho.
     * 
    **/
    data: XOR<carrinhoUpdateInput, carrinhoUncheckedUpdateInput>
    /**
     * Choose, which carrinho to update.
     * 
    **/
    where: carrinhoWhereUniqueInput
  }


  /**
   * carrinho updateMany
   */
  export type carrinhoUpdateManyArgs = {
    /**
     * The data used to update carrinhos.
     * 
    **/
    data: XOR<carrinhoUpdateManyMutationInput, carrinhoUncheckedUpdateManyInput>
    /**
     * Filter which carrinhos to update
     * 
    **/
    where?: carrinhoWhereInput
  }


  /**
   * carrinho upsert
   */
  export type carrinhoUpsertArgs = {
    /**
     * Select specific fields to fetch from the carrinho
     * 
    **/
    select?: carrinhoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: carrinhoInclude | null
    /**
     * The filter to search for the carrinho to update in case it exists.
     * 
    **/
    where: carrinhoWhereUniqueInput
    /**
     * In case the carrinho found by the `where` argument doesn't exist, create a new carrinho with this data.
     * 
    **/
    create: XOR<carrinhoCreateInput, carrinhoUncheckedCreateInput>
    /**
     * In case the carrinho was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<carrinhoUpdateInput, carrinhoUncheckedUpdateInput>
  }


  /**
   * carrinho delete
   */
  export type carrinhoDeleteArgs = {
    /**
     * Select specific fields to fetch from the carrinho
     * 
    **/
    select?: carrinhoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: carrinhoInclude | null
    /**
     * Filter which carrinho to delete.
     * 
    **/
    where: carrinhoWhereUniqueInput
  }


  /**
   * carrinho deleteMany
   */
  export type carrinhoDeleteManyArgs = {
    /**
     * Filter which carrinhos to delete
     * 
    **/
    where?: carrinhoWhereInput
  }


  /**
   * carrinho without action
   */
  export type carrinhoArgs = {
    /**
     * Select specific fields to fetch from the carrinho
     * 
    **/
    select?: carrinhoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: carrinhoInclude | null
  }



  /**
   * Model comprador
   */


  export type AggregateComprador = {
    _count: CompradorCountAggregateOutputType | null
    _avg: CompradorAvgAggregateOutputType | null
    _sum: CompradorSumAggregateOutputType | null
    _min: CompradorMinAggregateOutputType | null
    _max: CompradorMaxAggregateOutputType | null
  }

  export type CompradorAvgAggregateOutputType = {
    idComprador: number | null
    Usuario_idUsuario: number | null
  }

  export type CompradorSumAggregateOutputType = {
    idComprador: number | null
    Usuario_idUsuario: number | null
  }

  export type CompradorMinAggregateOutputType = {
    idComprador: number | null
    cpfcnpjComprador: string | null
    nomeComprador: string | null
    Usuario_idUsuario: number | null
  }

  export type CompradorMaxAggregateOutputType = {
    idComprador: number | null
    cpfcnpjComprador: string | null
    nomeComprador: string | null
    Usuario_idUsuario: number | null
  }

  export type CompradorCountAggregateOutputType = {
    idComprador: number
    cpfcnpjComprador: number
    nomeComprador: number
    Usuario_idUsuario: number
    _all: number
  }


  export type CompradorAvgAggregateInputType = {
    idComprador?: true
    Usuario_idUsuario?: true
  }

  export type CompradorSumAggregateInputType = {
    idComprador?: true
    Usuario_idUsuario?: true
  }

  export type CompradorMinAggregateInputType = {
    idComprador?: true
    cpfcnpjComprador?: true
    nomeComprador?: true
    Usuario_idUsuario?: true
  }

  export type CompradorMaxAggregateInputType = {
    idComprador?: true
    cpfcnpjComprador?: true
    nomeComprador?: true
    Usuario_idUsuario?: true
  }

  export type CompradorCountAggregateInputType = {
    idComprador?: true
    cpfcnpjComprador?: true
    nomeComprador?: true
    Usuario_idUsuario?: true
    _all?: true
  }

  export type CompradorAggregateArgs = {
    /**
     * Filter which comprador to aggregate.
     * 
    **/
    where?: compradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compradors to fetch.
     * 
    **/
    orderBy?: Enumerable<compradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: compradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compradors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compradors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned compradors
    **/
    _count?: true | CompradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompradorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompradorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompradorMaxAggregateInputType
  }

  export type GetCompradorAggregateType<T extends CompradorAggregateArgs> = {
        [P in keyof T & keyof AggregateComprador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComprador[P]>
      : GetScalarType<T[P], AggregateComprador[P]>
  }




  export type CompradorGroupByArgs = {
    where?: compradorWhereInput
    orderBy?: Enumerable<compradorOrderByWithAggregationInput>
    by: Array<CompradorScalarFieldEnum>
    having?: compradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompradorCountAggregateInputType | true
    _avg?: CompradorAvgAggregateInputType
    _sum?: CompradorSumAggregateInputType
    _min?: CompradorMinAggregateInputType
    _max?: CompradorMaxAggregateInputType
  }


  export type CompradorGroupByOutputType = {
    idComprador: number
    cpfcnpjComprador: string
    nomeComprador: string
    Usuario_idUsuario: number
    _count: CompradorCountAggregateOutputType | null
    _avg: CompradorAvgAggregateOutputType | null
    _sum: CompradorSumAggregateOutputType | null
    _min: CompradorMinAggregateOutputType | null
    _max: CompradorMaxAggregateOutputType | null
  }

  type GetCompradorGroupByPayload<T extends CompradorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CompradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompradorGroupByOutputType[P]>
            : GetScalarType<T[P], CompradorGroupByOutputType[P]>
        }
      >
    >


  export type compradorSelect = {
    idComprador?: boolean
    cpfcnpjComprador?: boolean
    nomeComprador?: boolean
    Usuario_idUsuario?: boolean
    usuario?: boolean | usuarioArgs
    pagamento?: boolean | pagamentoFindManyArgs
    _count?: boolean | CompradorCountOutputTypeArgs
  }

  export type compradorInclude = {
    usuario?: boolean | usuarioArgs
    pagamento?: boolean | pagamentoFindManyArgs
    _count?: boolean | CompradorCountOutputTypeArgs
  }

  export type compradorGetPayload<
    S extends boolean | null | undefined | compradorArgs,
    U = keyof S
      > = S extends true
        ? comprador
    : S extends undefined
    ? never
    : S extends compradorArgs | compradorFindManyArgs
    ?'include' extends U
    ? comprador  & {
    [P in TrueKeys<S['include']>]:
        P extends 'usuario' ? usuarioGetPayload<S['include'][P]> :
        P extends 'pagamento' ? Array < pagamentoGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompradorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'usuario' ? usuarioGetPayload<S['select'][P]> :
        P extends 'pagamento' ? Array < pagamentoGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompradorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof comprador ? comprador[P] : never
  } 
    : comprador
  : comprador


  type compradorCountArgs = Merge<
    Omit<compradorFindManyArgs, 'select' | 'include'> & {
      select?: CompradorCountAggregateInputType | true
    }
  >

  export interface compradorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Comprador that matches the filter.
     * @param {compradorFindUniqueArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends compradorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, compradorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'comprador'> extends True ? CheckSelect<T, Prisma__compradorClient<comprador>, Prisma__compradorClient<compradorGetPayload<T>>> : CheckSelect<T, Prisma__compradorClient<comprador | null >, Prisma__compradorClient<compradorGetPayload<T> | null >>

    /**
     * Find the first Comprador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorFindFirstArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends compradorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, compradorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'comprador'> extends True ? CheckSelect<T, Prisma__compradorClient<comprador>, Prisma__compradorClient<compradorGetPayload<T>>> : CheckSelect<T, Prisma__compradorClient<comprador | null >, Prisma__compradorClient<compradorGetPayload<T> | null >>

    /**
     * Find zero or more Compradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compradors
     * const compradors = await prisma.comprador.findMany()
     * 
     * // Get first 10 Compradors
     * const compradors = await prisma.comprador.findMany({ take: 10 })
     * 
     * // Only select the `idComprador`
     * const compradorWithIdCompradorOnly = await prisma.comprador.findMany({ select: { idComprador: true } })
     * 
    **/
    findMany<T extends compradorFindManyArgs>(
      args?: SelectSubset<T, compradorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<comprador>>, PrismaPromise<Array<compradorGetPayload<T>>>>

    /**
     * Create a Comprador.
     * @param {compradorCreateArgs} args - Arguments to create a Comprador.
     * @example
     * // Create one Comprador
     * const Comprador = await prisma.comprador.create({
     *   data: {
     *     // ... data to create a Comprador
     *   }
     * })
     * 
    **/
    create<T extends compradorCreateArgs>(
      args: SelectSubset<T, compradorCreateArgs>
    ): CheckSelect<T, Prisma__compradorClient<comprador>, Prisma__compradorClient<compradorGetPayload<T>>>

    /**
     * Create many Compradors.
     *     @param {compradorCreateManyArgs} args - Arguments to create many Compradors.
     *     @example
     *     // Create many Compradors
     *     const comprador = await prisma.comprador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends compradorCreateManyArgs>(
      args?: SelectSubset<T, compradorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comprador.
     * @param {compradorDeleteArgs} args - Arguments to delete one Comprador.
     * @example
     * // Delete one Comprador
     * const Comprador = await prisma.comprador.delete({
     *   where: {
     *     // ... filter to delete one Comprador
     *   }
     * })
     * 
    **/
    delete<T extends compradorDeleteArgs>(
      args: SelectSubset<T, compradorDeleteArgs>
    ): CheckSelect<T, Prisma__compradorClient<comprador>, Prisma__compradorClient<compradorGetPayload<T>>>

    /**
     * Update one Comprador.
     * @param {compradorUpdateArgs} args - Arguments to update one Comprador.
     * @example
     * // Update one Comprador
     * const comprador = await prisma.comprador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends compradorUpdateArgs>(
      args: SelectSubset<T, compradorUpdateArgs>
    ): CheckSelect<T, Prisma__compradorClient<comprador>, Prisma__compradorClient<compradorGetPayload<T>>>

    /**
     * Delete zero or more Compradors.
     * @param {compradorDeleteManyArgs} args - Arguments to filter Compradors to delete.
     * @example
     * // Delete a few Compradors
     * const { count } = await prisma.comprador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends compradorDeleteManyArgs>(
      args?: SelectSubset<T, compradorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compradors
     * const comprador = await prisma.comprador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends compradorUpdateManyArgs>(
      args: SelectSubset<T, compradorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comprador.
     * @param {compradorUpsertArgs} args - Arguments to update or create a Comprador.
     * @example
     * // Update or create a Comprador
     * const comprador = await prisma.comprador.upsert({
     *   create: {
     *     // ... data to create a Comprador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comprador we want to update
     *   }
     * })
    **/
    upsert<T extends compradorUpsertArgs>(
      args: SelectSubset<T, compradorUpsertArgs>
    ): CheckSelect<T, Prisma__compradorClient<comprador>, Prisma__compradorClient<compradorGetPayload<T>>>

    /**
     * Count the number of Compradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compradorCountArgs} args - Arguments to filter Compradors to count.
     * @example
     * // Count the number of Compradors
     * const count = await prisma.comprador.count({
     *   where: {
     *     // ... the filter for the Compradors we want to count
     *   }
     * })
    **/
    count<T extends compradorCountArgs>(
      args?: Subset<T, compradorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comprador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompradorAggregateArgs>(args: Subset<T, CompradorAggregateArgs>): PrismaPromise<GetCompradorAggregateType<T>>

    /**
     * Group by Comprador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompradorGroupByArgs['orderBy'] }
        : { orderBy?: CompradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompradorGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for comprador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__compradorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    usuario<T extends usuarioArgs = {}>(args?: Subset<T, usuarioArgs>): CheckSelect<T, Prisma__usuarioClient<usuario | null >, Prisma__usuarioClient<usuarioGetPayload<T> | null >>;

    pagamento<T extends pagamentoFindManyArgs = {}>(args?: Subset<T, pagamentoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<pagamento>>, PrismaPromise<Array<pagamentoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * comprador findUnique
   */
  export type compradorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the comprador
     * 
    **/
    select?: compradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: compradorInclude | null
    /**
     * Throw an Error if a comprador can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which comprador to fetch.
     * 
    **/
    where: compradorWhereUniqueInput
  }


  /**
   * comprador findFirst
   */
  export type compradorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the comprador
     * 
    **/
    select?: compradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: compradorInclude | null
    /**
     * Throw an Error if a comprador can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which comprador to fetch.
     * 
    **/
    where?: compradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compradors to fetch.
     * 
    **/
    orderBy?: Enumerable<compradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compradors.
     * 
    **/
    cursor?: compradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compradors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compradors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compradors.
     * 
    **/
    distinct?: Enumerable<CompradorScalarFieldEnum>
  }


  /**
   * comprador findMany
   */
  export type compradorFindManyArgs = {
    /**
     * Select specific fields to fetch from the comprador
     * 
    **/
    select?: compradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: compradorInclude | null
    /**
     * Filter, which compradors to fetch.
     * 
    **/
    where?: compradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compradors to fetch.
     * 
    **/
    orderBy?: Enumerable<compradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing compradors.
     * 
    **/
    cursor?: compradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compradors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compradors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CompradorScalarFieldEnum>
  }


  /**
   * comprador create
   */
  export type compradorCreateArgs = {
    /**
     * Select specific fields to fetch from the comprador
     * 
    **/
    select?: compradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: compradorInclude | null
    /**
     * The data needed to create a comprador.
     * 
    **/
    data: XOR<compradorCreateInput, compradorUncheckedCreateInput>
  }


  /**
   * comprador createMany
   */
  export type compradorCreateManyArgs = {
    /**
     * The data used to create many compradors.
     * 
    **/
    data: Enumerable<compradorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * comprador update
   */
  export type compradorUpdateArgs = {
    /**
     * Select specific fields to fetch from the comprador
     * 
    **/
    select?: compradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: compradorInclude | null
    /**
     * The data needed to update a comprador.
     * 
    **/
    data: XOR<compradorUpdateInput, compradorUncheckedUpdateInput>
    /**
     * Choose, which comprador to update.
     * 
    **/
    where: compradorWhereUniqueInput
  }


  /**
   * comprador updateMany
   */
  export type compradorUpdateManyArgs = {
    /**
     * The data used to update compradors.
     * 
    **/
    data: XOR<compradorUpdateManyMutationInput, compradorUncheckedUpdateManyInput>
    /**
     * Filter which compradors to update
     * 
    **/
    where?: compradorWhereInput
  }


  /**
   * comprador upsert
   */
  export type compradorUpsertArgs = {
    /**
     * Select specific fields to fetch from the comprador
     * 
    **/
    select?: compradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: compradorInclude | null
    /**
     * The filter to search for the comprador to update in case it exists.
     * 
    **/
    where: compradorWhereUniqueInput
    /**
     * In case the comprador found by the `where` argument doesn't exist, create a new comprador with this data.
     * 
    **/
    create: XOR<compradorCreateInput, compradorUncheckedCreateInput>
    /**
     * In case the comprador was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<compradorUpdateInput, compradorUncheckedUpdateInput>
  }


  /**
   * comprador delete
   */
  export type compradorDeleteArgs = {
    /**
     * Select specific fields to fetch from the comprador
     * 
    **/
    select?: compradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: compradorInclude | null
    /**
     * Filter which comprador to delete.
     * 
    **/
    where: compradorWhereUniqueInput
  }


  /**
   * comprador deleteMany
   */
  export type compradorDeleteManyArgs = {
    /**
     * Filter which compradors to delete
     * 
    **/
    where?: compradorWhereInput
  }


  /**
   * comprador without action
   */
  export type compradorArgs = {
    /**
     * Select specific fields to fetch from the comprador
     * 
    **/
    select?: compradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: compradorInclude | null
  }



  /**
   * Model entrega
   */


  export type AggregateEntrega = {
    _count: EntregaCountAggregateOutputType | null
    _avg: EntregaAvgAggregateOutputType | null
    _sum: EntregaSumAggregateOutputType | null
    _min: EntregaMinAggregateOutputType | null
    _max: EntregaMaxAggregateOutputType | null
  }

  export type EntregaAvgAggregateOutputType = {
    idEntrega: number | null
    Pagamento_idPagamento: number | null
  }

  export type EntregaSumAggregateOutputType = {
    idEntrega: number | null
    Pagamento_idPagamento: number | null
  }

  export type EntregaMinAggregateOutputType = {
    idEntrega: number | null
    prazoEntrega: string | null
    statusEntrega: string | null
    Pagamento_idPagamento: number | null
  }

  export type EntregaMaxAggregateOutputType = {
    idEntrega: number | null
    prazoEntrega: string | null
    statusEntrega: string | null
    Pagamento_idPagamento: number | null
  }

  export type EntregaCountAggregateOutputType = {
    idEntrega: number
    prazoEntrega: number
    statusEntrega: number
    Pagamento_idPagamento: number
    _all: number
  }


  export type EntregaAvgAggregateInputType = {
    idEntrega?: true
    Pagamento_idPagamento?: true
  }

  export type EntregaSumAggregateInputType = {
    idEntrega?: true
    Pagamento_idPagamento?: true
  }

  export type EntregaMinAggregateInputType = {
    idEntrega?: true
    prazoEntrega?: true
    statusEntrega?: true
    Pagamento_idPagamento?: true
  }

  export type EntregaMaxAggregateInputType = {
    idEntrega?: true
    prazoEntrega?: true
    statusEntrega?: true
    Pagamento_idPagamento?: true
  }

  export type EntregaCountAggregateInputType = {
    idEntrega?: true
    prazoEntrega?: true
    statusEntrega?: true
    Pagamento_idPagamento?: true
    _all?: true
  }

  export type EntregaAggregateArgs = {
    /**
     * Filter which entrega to aggregate.
     * 
    **/
    where?: entregaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entregas to fetch.
     * 
    **/
    orderBy?: Enumerable<entregaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: entregaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entregas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entregas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned entregas
    **/
    _count?: true | EntregaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EntregaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EntregaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntregaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntregaMaxAggregateInputType
  }

  export type GetEntregaAggregateType<T extends EntregaAggregateArgs> = {
        [P in keyof T & keyof AggregateEntrega]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntrega[P]>
      : GetScalarType<T[P], AggregateEntrega[P]>
  }




  export type EntregaGroupByArgs = {
    where?: entregaWhereInput
    orderBy?: Enumerable<entregaOrderByWithAggregationInput>
    by: Array<EntregaScalarFieldEnum>
    having?: entregaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntregaCountAggregateInputType | true
    _avg?: EntregaAvgAggregateInputType
    _sum?: EntregaSumAggregateInputType
    _min?: EntregaMinAggregateInputType
    _max?: EntregaMaxAggregateInputType
  }


  export type EntregaGroupByOutputType = {
    idEntrega: number
    prazoEntrega: string | null
    statusEntrega: string
    Pagamento_idPagamento: number
    _count: EntregaCountAggregateOutputType | null
    _avg: EntregaAvgAggregateOutputType | null
    _sum: EntregaSumAggregateOutputType | null
    _min: EntregaMinAggregateOutputType | null
    _max: EntregaMaxAggregateOutputType | null
  }

  type GetEntregaGroupByPayload<T extends EntregaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EntregaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntregaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntregaGroupByOutputType[P]>
            : GetScalarType<T[P], EntregaGroupByOutputType[P]>
        }
      >
    >


  export type entregaSelect = {
    idEntrega?: boolean
    prazoEntrega?: boolean
    statusEntrega?: boolean
    Pagamento_idPagamento?: boolean
    pagamento?: boolean | pagamentoArgs
  }

  export type entregaInclude = {
    pagamento?: boolean | pagamentoArgs
  }

  export type entregaGetPayload<
    S extends boolean | null | undefined | entregaArgs,
    U = keyof S
      > = S extends true
        ? entrega
    : S extends undefined
    ? never
    : S extends entregaArgs | entregaFindManyArgs
    ?'include' extends U
    ? entrega  & {
    [P in TrueKeys<S['include']>]:
        P extends 'pagamento' ? pagamentoGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'pagamento' ? pagamentoGetPayload<S['select'][P]> :  P extends keyof entrega ? entrega[P] : never
  } 
    : entrega
  : entrega


  type entregaCountArgs = Merge<
    Omit<entregaFindManyArgs, 'select' | 'include'> & {
      select?: EntregaCountAggregateInputType | true
    }
  >

  export interface entregaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Entrega that matches the filter.
     * @param {entregaFindUniqueArgs} args - Arguments to find a Entrega
     * @example
     * // Get one Entrega
     * const entrega = await prisma.entrega.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends entregaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, entregaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'entrega'> extends True ? CheckSelect<T, Prisma__entregaClient<entrega>, Prisma__entregaClient<entregaGetPayload<T>>> : CheckSelect<T, Prisma__entregaClient<entrega | null >, Prisma__entregaClient<entregaGetPayload<T> | null >>

    /**
     * Find the first Entrega that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entregaFindFirstArgs} args - Arguments to find a Entrega
     * @example
     * // Get one Entrega
     * const entrega = await prisma.entrega.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends entregaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, entregaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'entrega'> extends True ? CheckSelect<T, Prisma__entregaClient<entrega>, Prisma__entregaClient<entregaGetPayload<T>>> : CheckSelect<T, Prisma__entregaClient<entrega | null >, Prisma__entregaClient<entregaGetPayload<T> | null >>

    /**
     * Find zero or more Entregas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entregaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entregas
     * const entregas = await prisma.entrega.findMany()
     * 
     * // Get first 10 Entregas
     * const entregas = await prisma.entrega.findMany({ take: 10 })
     * 
     * // Only select the `idEntrega`
     * const entregaWithIdEntregaOnly = await prisma.entrega.findMany({ select: { idEntrega: true } })
     * 
    **/
    findMany<T extends entregaFindManyArgs>(
      args?: SelectSubset<T, entregaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<entrega>>, PrismaPromise<Array<entregaGetPayload<T>>>>

    /**
     * Create a Entrega.
     * @param {entregaCreateArgs} args - Arguments to create a Entrega.
     * @example
     * // Create one Entrega
     * const Entrega = await prisma.entrega.create({
     *   data: {
     *     // ... data to create a Entrega
     *   }
     * })
     * 
    **/
    create<T extends entregaCreateArgs>(
      args: SelectSubset<T, entregaCreateArgs>
    ): CheckSelect<T, Prisma__entregaClient<entrega>, Prisma__entregaClient<entregaGetPayload<T>>>

    /**
     * Create many Entregas.
     *     @param {entregaCreateManyArgs} args - Arguments to create many Entregas.
     *     @example
     *     // Create many Entregas
     *     const entrega = await prisma.entrega.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends entregaCreateManyArgs>(
      args?: SelectSubset<T, entregaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Entrega.
     * @param {entregaDeleteArgs} args - Arguments to delete one Entrega.
     * @example
     * // Delete one Entrega
     * const Entrega = await prisma.entrega.delete({
     *   where: {
     *     // ... filter to delete one Entrega
     *   }
     * })
     * 
    **/
    delete<T extends entregaDeleteArgs>(
      args: SelectSubset<T, entregaDeleteArgs>
    ): CheckSelect<T, Prisma__entregaClient<entrega>, Prisma__entregaClient<entregaGetPayload<T>>>

    /**
     * Update one Entrega.
     * @param {entregaUpdateArgs} args - Arguments to update one Entrega.
     * @example
     * // Update one Entrega
     * const entrega = await prisma.entrega.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends entregaUpdateArgs>(
      args: SelectSubset<T, entregaUpdateArgs>
    ): CheckSelect<T, Prisma__entregaClient<entrega>, Prisma__entregaClient<entregaGetPayload<T>>>

    /**
     * Delete zero or more Entregas.
     * @param {entregaDeleteManyArgs} args - Arguments to filter Entregas to delete.
     * @example
     * // Delete a few Entregas
     * const { count } = await prisma.entrega.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends entregaDeleteManyArgs>(
      args?: SelectSubset<T, entregaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entregas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entregaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entregas
     * const entrega = await prisma.entrega.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends entregaUpdateManyArgs>(
      args: SelectSubset<T, entregaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Entrega.
     * @param {entregaUpsertArgs} args - Arguments to update or create a Entrega.
     * @example
     * // Update or create a Entrega
     * const entrega = await prisma.entrega.upsert({
     *   create: {
     *     // ... data to create a Entrega
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entrega we want to update
     *   }
     * })
    **/
    upsert<T extends entregaUpsertArgs>(
      args: SelectSubset<T, entregaUpsertArgs>
    ): CheckSelect<T, Prisma__entregaClient<entrega>, Prisma__entregaClient<entregaGetPayload<T>>>

    /**
     * Count the number of Entregas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entregaCountArgs} args - Arguments to filter Entregas to count.
     * @example
     * // Count the number of Entregas
     * const count = await prisma.entrega.count({
     *   where: {
     *     // ... the filter for the Entregas we want to count
     *   }
     * })
    **/
    count<T extends entregaCountArgs>(
      args?: Subset<T, entregaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntregaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entrega.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntregaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntregaAggregateArgs>(args: Subset<T, EntregaAggregateArgs>): PrismaPromise<GetEntregaAggregateType<T>>

    /**
     * Group by Entrega.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntregaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntregaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntregaGroupByArgs['orderBy'] }
        : { orderBy?: EntregaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntregaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntregaGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for entrega.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__entregaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    pagamento<T extends pagamentoArgs = {}>(args?: Subset<T, pagamentoArgs>): CheckSelect<T, Prisma__pagamentoClient<pagamento | null >, Prisma__pagamentoClient<pagamentoGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * entrega findUnique
   */
  export type entregaFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the entrega
     * 
    **/
    select?: entregaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: entregaInclude | null
    /**
     * Throw an Error if a entrega can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which entrega to fetch.
     * 
    **/
    where: entregaWhereUniqueInput
  }


  /**
   * entrega findFirst
   */
  export type entregaFindFirstArgs = {
    /**
     * Select specific fields to fetch from the entrega
     * 
    **/
    select?: entregaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: entregaInclude | null
    /**
     * Throw an Error if a entrega can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which entrega to fetch.
     * 
    **/
    where?: entregaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entregas to fetch.
     * 
    **/
    orderBy?: Enumerable<entregaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for entregas.
     * 
    **/
    cursor?: entregaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entregas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entregas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of entregas.
     * 
    **/
    distinct?: Enumerable<EntregaScalarFieldEnum>
  }


  /**
   * entrega findMany
   */
  export type entregaFindManyArgs = {
    /**
     * Select specific fields to fetch from the entrega
     * 
    **/
    select?: entregaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: entregaInclude | null
    /**
     * Filter, which entregas to fetch.
     * 
    **/
    where?: entregaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entregas to fetch.
     * 
    **/
    orderBy?: Enumerable<entregaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing entregas.
     * 
    **/
    cursor?: entregaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entregas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entregas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EntregaScalarFieldEnum>
  }


  /**
   * entrega create
   */
  export type entregaCreateArgs = {
    /**
     * Select specific fields to fetch from the entrega
     * 
    **/
    select?: entregaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: entregaInclude | null
    /**
     * The data needed to create a entrega.
     * 
    **/
    data: XOR<entregaCreateInput, entregaUncheckedCreateInput>
  }


  /**
   * entrega createMany
   */
  export type entregaCreateManyArgs = {
    /**
     * The data used to create many entregas.
     * 
    **/
    data: Enumerable<entregaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * entrega update
   */
  export type entregaUpdateArgs = {
    /**
     * Select specific fields to fetch from the entrega
     * 
    **/
    select?: entregaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: entregaInclude | null
    /**
     * The data needed to update a entrega.
     * 
    **/
    data: XOR<entregaUpdateInput, entregaUncheckedUpdateInput>
    /**
     * Choose, which entrega to update.
     * 
    **/
    where: entregaWhereUniqueInput
  }


  /**
   * entrega updateMany
   */
  export type entregaUpdateManyArgs = {
    /**
     * The data used to update entregas.
     * 
    **/
    data: XOR<entregaUpdateManyMutationInput, entregaUncheckedUpdateManyInput>
    /**
     * Filter which entregas to update
     * 
    **/
    where?: entregaWhereInput
  }


  /**
   * entrega upsert
   */
  export type entregaUpsertArgs = {
    /**
     * Select specific fields to fetch from the entrega
     * 
    **/
    select?: entregaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: entregaInclude | null
    /**
     * The filter to search for the entrega to update in case it exists.
     * 
    **/
    where: entregaWhereUniqueInput
    /**
     * In case the entrega found by the `where` argument doesn't exist, create a new entrega with this data.
     * 
    **/
    create: XOR<entregaCreateInput, entregaUncheckedCreateInput>
    /**
     * In case the entrega was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<entregaUpdateInput, entregaUncheckedUpdateInput>
  }


  /**
   * entrega delete
   */
  export type entregaDeleteArgs = {
    /**
     * Select specific fields to fetch from the entrega
     * 
    **/
    select?: entregaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: entregaInclude | null
    /**
     * Filter which entrega to delete.
     * 
    **/
    where: entregaWhereUniqueInput
  }


  /**
   * entrega deleteMany
   */
  export type entregaDeleteManyArgs = {
    /**
     * Filter which entregas to delete
     * 
    **/
    where?: entregaWhereInput
  }


  /**
   * entrega without action
   */
  export type entregaArgs = {
    /**
     * Select specific fields to fetch from the entrega
     * 
    **/
    select?: entregaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: entregaInclude | null
  }



  /**
   * Model pagamento
   */


  export type AggregatePagamento = {
    _count: PagamentoCountAggregateOutputType | null
    _avg: PagamentoAvgAggregateOutputType | null
    _sum: PagamentoSumAggregateOutputType | null
    _min: PagamentoMinAggregateOutputType | null
    _max: PagamentoMaxAggregateOutputType | null
  }

  export type PagamentoAvgAggregateOutputType = {
    idPagamento: number | null
    Comprador_idComprador: number | null
    Comprador_Usuario_idUsuario: number | null
  }

  export type PagamentoSumAggregateOutputType = {
    idPagamento: number | null
    Comprador_idComprador: number | null
    Comprador_Usuario_idUsuario: number | null
  }

  export type PagamentoMinAggregateOutputType = {
    idPagamento: number | null
    valorPagamento: string | null
    formaPagamento: string | null
    statusPagamento: string | null
    Comprador_idComprador: number | null
    Comprador_Usuario_idUsuario: number | null
  }

  export type PagamentoMaxAggregateOutputType = {
    idPagamento: number | null
    valorPagamento: string | null
    formaPagamento: string | null
    statusPagamento: string | null
    Comprador_idComprador: number | null
    Comprador_Usuario_idUsuario: number | null
  }

  export type PagamentoCountAggregateOutputType = {
    idPagamento: number
    valorPagamento: number
    formaPagamento: number
    statusPagamento: number
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
    _all: number
  }


  export type PagamentoAvgAggregateInputType = {
    idPagamento?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
  }

  export type PagamentoSumAggregateInputType = {
    idPagamento?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
  }

  export type PagamentoMinAggregateInputType = {
    idPagamento?: true
    valorPagamento?: true
    formaPagamento?: true
    statusPagamento?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
  }

  export type PagamentoMaxAggregateInputType = {
    idPagamento?: true
    valorPagamento?: true
    formaPagamento?: true
    statusPagamento?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
  }

  export type PagamentoCountAggregateInputType = {
    idPagamento?: true
    valorPagamento?: true
    formaPagamento?: true
    statusPagamento?: true
    Comprador_idComprador?: true
    Comprador_Usuario_idUsuario?: true
    _all?: true
  }

  export type PagamentoAggregateArgs = {
    /**
     * Filter which pagamento to aggregate.
     * 
    **/
    where?: pagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagamentos to fetch.
     * 
    **/
    orderBy?: Enumerable<pagamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: pagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagamentos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagamentos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pagamentos
    **/
    _count?: true | PagamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagamentoMaxAggregateInputType
  }

  export type GetPagamentoAggregateType<T extends PagamentoAggregateArgs> = {
        [P in keyof T & keyof AggregatePagamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagamento[P]>
      : GetScalarType<T[P], AggregatePagamento[P]>
  }




  export type PagamentoGroupByArgs = {
    where?: pagamentoWhereInput
    orderBy?: Enumerable<pagamentoOrderByWithAggregationInput>
    by: Array<PagamentoScalarFieldEnum>
    having?: pagamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagamentoCountAggregateInputType | true
    _avg?: PagamentoAvgAggregateInputType
    _sum?: PagamentoSumAggregateInputType
    _min?: PagamentoMinAggregateInputType
    _max?: PagamentoMaxAggregateInputType
  }


  export type PagamentoGroupByOutputType = {
    idPagamento: number
    valorPagamento: string
    formaPagamento: string
    statusPagamento: string
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
    _count: PagamentoCountAggregateOutputType | null
    _avg: PagamentoAvgAggregateOutputType | null
    _sum: PagamentoSumAggregateOutputType | null
    _min: PagamentoMinAggregateOutputType | null
    _max: PagamentoMaxAggregateOutputType | null
  }

  type GetPagamentoGroupByPayload<T extends PagamentoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PagamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagamentoGroupByOutputType[P]>
            : GetScalarType<T[P], PagamentoGroupByOutputType[P]>
        }
      >
    >


  export type pagamentoSelect = {
    idPagamento?: boolean
    valorPagamento?: boolean
    formaPagamento?: boolean
    statusPagamento?: boolean
    Comprador_idComprador?: boolean
    Comprador_Usuario_idUsuario?: boolean
    entrega?: boolean | entregaFindManyArgs
    comprador?: boolean | compradorArgs
    _count?: boolean | PagamentoCountOutputTypeArgs
  }

  export type pagamentoInclude = {
    entrega?: boolean | entregaFindManyArgs
    comprador?: boolean | compradorArgs
    _count?: boolean | PagamentoCountOutputTypeArgs
  }

  export type pagamentoGetPayload<
    S extends boolean | null | undefined | pagamentoArgs,
    U = keyof S
      > = S extends true
        ? pagamento
    : S extends undefined
    ? never
    : S extends pagamentoArgs | pagamentoFindManyArgs
    ?'include' extends U
    ? pagamento  & {
    [P in TrueKeys<S['include']>]:
        P extends 'entrega' ? Array < entregaGetPayload<S['include'][P]>>  :
        P extends 'comprador' ? compradorGetPayload<S['include'][P]> :
        P extends '_count' ? PagamentoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'entrega' ? Array < entregaGetPayload<S['select'][P]>>  :
        P extends 'comprador' ? compradorGetPayload<S['select'][P]> :
        P extends '_count' ? PagamentoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof pagamento ? pagamento[P] : never
  } 
    : pagamento
  : pagamento


  type pagamentoCountArgs = Merge<
    Omit<pagamentoFindManyArgs, 'select' | 'include'> & {
      select?: PagamentoCountAggregateInputType | true
    }
  >

  export interface pagamentoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Pagamento that matches the filter.
     * @param {pagamentoFindUniqueArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pagamentoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, pagamentoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pagamento'> extends True ? CheckSelect<T, Prisma__pagamentoClient<pagamento>, Prisma__pagamentoClient<pagamentoGetPayload<T>>> : CheckSelect<T, Prisma__pagamentoClient<pagamento | null >, Prisma__pagamentoClient<pagamentoGetPayload<T> | null >>

    /**
     * Find the first Pagamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagamentoFindFirstArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pagamentoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, pagamentoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pagamento'> extends True ? CheckSelect<T, Prisma__pagamentoClient<pagamento>, Prisma__pagamentoClient<pagamentoGetPayload<T>>> : CheckSelect<T, Prisma__pagamentoClient<pagamento | null >, Prisma__pagamentoClient<pagamentoGetPayload<T> | null >>

    /**
     * Find zero or more Pagamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagamentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pagamentos
     * const pagamentos = await prisma.pagamento.findMany()
     * 
     * // Get first 10 Pagamentos
     * const pagamentos = await prisma.pagamento.findMany({ take: 10 })
     * 
     * // Only select the `idPagamento`
     * const pagamentoWithIdPagamentoOnly = await prisma.pagamento.findMany({ select: { idPagamento: true } })
     * 
    **/
    findMany<T extends pagamentoFindManyArgs>(
      args?: SelectSubset<T, pagamentoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<pagamento>>, PrismaPromise<Array<pagamentoGetPayload<T>>>>

    /**
     * Create a Pagamento.
     * @param {pagamentoCreateArgs} args - Arguments to create a Pagamento.
     * @example
     * // Create one Pagamento
     * const Pagamento = await prisma.pagamento.create({
     *   data: {
     *     // ... data to create a Pagamento
     *   }
     * })
     * 
    **/
    create<T extends pagamentoCreateArgs>(
      args: SelectSubset<T, pagamentoCreateArgs>
    ): CheckSelect<T, Prisma__pagamentoClient<pagamento>, Prisma__pagamentoClient<pagamentoGetPayload<T>>>

    /**
     * Create many Pagamentos.
     *     @param {pagamentoCreateManyArgs} args - Arguments to create many Pagamentos.
     *     @example
     *     // Create many Pagamentos
     *     const pagamento = await prisma.pagamento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends pagamentoCreateManyArgs>(
      args?: SelectSubset<T, pagamentoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Pagamento.
     * @param {pagamentoDeleteArgs} args - Arguments to delete one Pagamento.
     * @example
     * // Delete one Pagamento
     * const Pagamento = await prisma.pagamento.delete({
     *   where: {
     *     // ... filter to delete one Pagamento
     *   }
     * })
     * 
    **/
    delete<T extends pagamentoDeleteArgs>(
      args: SelectSubset<T, pagamentoDeleteArgs>
    ): CheckSelect<T, Prisma__pagamentoClient<pagamento>, Prisma__pagamentoClient<pagamentoGetPayload<T>>>

    /**
     * Update one Pagamento.
     * @param {pagamentoUpdateArgs} args - Arguments to update one Pagamento.
     * @example
     * // Update one Pagamento
     * const pagamento = await prisma.pagamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pagamentoUpdateArgs>(
      args: SelectSubset<T, pagamentoUpdateArgs>
    ): CheckSelect<T, Prisma__pagamentoClient<pagamento>, Prisma__pagamentoClient<pagamentoGetPayload<T>>>

    /**
     * Delete zero or more Pagamentos.
     * @param {pagamentoDeleteManyArgs} args - Arguments to filter Pagamentos to delete.
     * @example
     * // Delete a few Pagamentos
     * const { count } = await prisma.pagamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pagamentoDeleteManyArgs>(
      args?: SelectSubset<T, pagamentoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pagamentos
     * const pagamento = await prisma.pagamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pagamentoUpdateManyArgs>(
      args: SelectSubset<T, pagamentoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pagamento.
     * @param {pagamentoUpsertArgs} args - Arguments to update or create a Pagamento.
     * @example
     * // Update or create a Pagamento
     * const pagamento = await prisma.pagamento.upsert({
     *   create: {
     *     // ... data to create a Pagamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pagamento we want to update
     *   }
     * })
    **/
    upsert<T extends pagamentoUpsertArgs>(
      args: SelectSubset<T, pagamentoUpsertArgs>
    ): CheckSelect<T, Prisma__pagamentoClient<pagamento>, Prisma__pagamentoClient<pagamentoGetPayload<T>>>

    /**
     * Count the number of Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagamentoCountArgs} args - Arguments to filter Pagamentos to count.
     * @example
     * // Count the number of Pagamentos
     * const count = await prisma.pagamento.count({
     *   where: {
     *     // ... the filter for the Pagamentos we want to count
     *   }
     * })
    **/
    count<T extends pagamentoCountArgs>(
      args?: Subset<T, pagamentoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagamentoAggregateArgs>(args: Subset<T, PagamentoAggregateArgs>): PrismaPromise<GetPagamentoAggregateType<T>>

    /**
     * Group by Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagamentoGroupByArgs['orderBy'] }
        : { orderBy?: PagamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagamentoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for pagamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pagamentoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    entrega<T extends entregaFindManyArgs = {}>(args?: Subset<T, entregaFindManyArgs>): CheckSelect<T, PrismaPromise<Array<entrega>>, PrismaPromise<Array<entregaGetPayload<T>>>>;

    comprador<T extends compradorArgs = {}>(args?: Subset<T, compradorArgs>): CheckSelect<T, Prisma__compradorClient<comprador | null >, Prisma__compradorClient<compradorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * pagamento findUnique
   */
  export type pagamentoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the pagamento
     * 
    **/
    select?: pagamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pagamentoInclude | null
    /**
     * Throw an Error if a pagamento can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which pagamento to fetch.
     * 
    **/
    where: pagamentoWhereUniqueInput
  }


  /**
   * pagamento findFirst
   */
  export type pagamentoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the pagamento
     * 
    **/
    select?: pagamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pagamentoInclude | null
    /**
     * Throw an Error if a pagamento can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which pagamento to fetch.
     * 
    **/
    where?: pagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagamentos to fetch.
     * 
    **/
    orderBy?: Enumerable<pagamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pagamentos.
     * 
    **/
    cursor?: pagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagamentos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagamentos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pagamentos.
     * 
    **/
    distinct?: Enumerable<PagamentoScalarFieldEnum>
  }


  /**
   * pagamento findMany
   */
  export type pagamentoFindManyArgs = {
    /**
     * Select specific fields to fetch from the pagamento
     * 
    **/
    select?: pagamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pagamentoInclude | null
    /**
     * Filter, which pagamentos to fetch.
     * 
    **/
    where?: pagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagamentos to fetch.
     * 
    **/
    orderBy?: Enumerable<pagamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pagamentos.
     * 
    **/
    cursor?: pagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagamentos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagamentos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PagamentoScalarFieldEnum>
  }


  /**
   * pagamento create
   */
  export type pagamentoCreateArgs = {
    /**
     * Select specific fields to fetch from the pagamento
     * 
    **/
    select?: pagamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pagamentoInclude | null
    /**
     * The data needed to create a pagamento.
     * 
    **/
    data: XOR<pagamentoCreateInput, pagamentoUncheckedCreateInput>
  }


  /**
   * pagamento createMany
   */
  export type pagamentoCreateManyArgs = {
    /**
     * The data used to create many pagamentos.
     * 
    **/
    data: Enumerable<pagamentoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * pagamento update
   */
  export type pagamentoUpdateArgs = {
    /**
     * Select specific fields to fetch from the pagamento
     * 
    **/
    select?: pagamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pagamentoInclude | null
    /**
     * The data needed to update a pagamento.
     * 
    **/
    data: XOR<pagamentoUpdateInput, pagamentoUncheckedUpdateInput>
    /**
     * Choose, which pagamento to update.
     * 
    **/
    where: pagamentoWhereUniqueInput
  }


  /**
   * pagamento updateMany
   */
  export type pagamentoUpdateManyArgs = {
    /**
     * The data used to update pagamentos.
     * 
    **/
    data: XOR<pagamentoUpdateManyMutationInput, pagamentoUncheckedUpdateManyInput>
    /**
     * Filter which pagamentos to update
     * 
    **/
    where?: pagamentoWhereInput
  }


  /**
   * pagamento upsert
   */
  export type pagamentoUpsertArgs = {
    /**
     * Select specific fields to fetch from the pagamento
     * 
    **/
    select?: pagamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pagamentoInclude | null
    /**
     * The filter to search for the pagamento to update in case it exists.
     * 
    **/
    where: pagamentoWhereUniqueInput
    /**
     * In case the pagamento found by the `where` argument doesn't exist, create a new pagamento with this data.
     * 
    **/
    create: XOR<pagamentoCreateInput, pagamentoUncheckedCreateInput>
    /**
     * In case the pagamento was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<pagamentoUpdateInput, pagamentoUncheckedUpdateInput>
  }


  /**
   * pagamento delete
   */
  export type pagamentoDeleteArgs = {
    /**
     * Select specific fields to fetch from the pagamento
     * 
    **/
    select?: pagamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pagamentoInclude | null
    /**
     * Filter which pagamento to delete.
     * 
    **/
    where: pagamentoWhereUniqueInput
  }


  /**
   * pagamento deleteMany
   */
  export type pagamentoDeleteManyArgs = {
    /**
     * Filter which pagamentos to delete
     * 
    **/
    where?: pagamentoWhereInput
  }


  /**
   * pagamento without action
   */
  export type pagamentoArgs = {
    /**
     * Select specific fields to fetch from the pagamento
     * 
    **/
    select?: pagamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: pagamentoInclude | null
  }



  /**
   * Model produto
   */


  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    idProduto: number | null
    Vendedor_idVendedor: number | null
    quantidadeVendida: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    idProduto: number | null
    Vendedor_idVendedor: number | null
    quantidadeVendida: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    idProduto: number | null
    compensa_aoProduto: string | null
    descProduto: string | null
    categoriaProduto: string | null
    precoProduto: string | null
    Vendedor_idVendedor: number | null
    quantidadeVendida: number | null
    createdAt: Date | null
  }

  export type ProdutoMaxAggregateOutputType = {
    idProduto: number | null
    compensa_aoProduto: string | null
    descProduto: string | null
    categoriaProduto: string | null
    precoProduto: string | null
    Vendedor_idVendedor: number | null
    quantidadeVendida: number | null
    createdAt: Date | null
  }

  export type ProdutoCountAggregateOutputType = {
    idProduto: number
    compensa_aoProduto: number
    descProduto: number
    categoriaProduto: number
    precoProduto: number
    Vendedor_idVendedor: number
    quantidadeVendida: number
    createdAt: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    idProduto?: true
    Vendedor_idVendedor?: true
    quantidadeVendida?: true
  }

  export type ProdutoSumAggregateInputType = {
    idProduto?: true
    Vendedor_idVendedor?: true
    quantidadeVendida?: true
  }

  export type ProdutoMinAggregateInputType = {
    idProduto?: true
    compensa_aoProduto?: true
    descProduto?: true
    categoriaProduto?: true
    precoProduto?: true
    Vendedor_idVendedor?: true
    quantidadeVendida?: true
    createdAt?: true
  }

  export type ProdutoMaxAggregateInputType = {
    idProduto?: true
    compensa_aoProduto?: true
    descProduto?: true
    categoriaProduto?: true
    precoProduto?: true
    Vendedor_idVendedor?: true
    quantidadeVendida?: true
    createdAt?: true
  }

  export type ProdutoCountAggregateInputType = {
    idProduto?: true
    compensa_aoProduto?: true
    descProduto?: true
    categoriaProduto?: true
    precoProduto?: true
    Vendedor_idVendedor?: true
    quantidadeVendida?: true
    createdAt?: true
    _all?: true
  }

  export type ProdutoAggregateArgs = {
    /**
     * Filter which produto to aggregate.
     * 
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs = {
    where?: produtoWhereInput
    orderBy?: Enumerable<produtoOrderByWithAggregationInput>
    by: Array<ProdutoScalarFieldEnum>
    having?: produtoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }


  export type ProdutoGroupByOutputType = {
    idProduto: number
    compensa_aoProduto: string
    descProduto: string | null
    categoriaProduto: string | null
    precoProduto: string
    Vendedor_idVendedor: number
    quantidadeVendida: number | null
    createdAt: Date
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type produtoSelect = {
    idProduto?: boolean
    compensa_aoProduto?: boolean
    descProduto?: boolean
    categoriaProduto?: boolean
    precoProduto?: boolean
    Vendedor_idVendedor?: boolean
    quantidadeVendida?: boolean
    createdAt?: boolean
    carrinho?: boolean | carrinhoFindManyArgs
    vendedor?: boolean | vendedorArgs
    _count?: boolean | ProdutoCountOutputTypeArgs
  }

  export type produtoInclude = {
    carrinho?: boolean | carrinhoFindManyArgs
    vendedor?: boolean | vendedorArgs
    _count?: boolean | ProdutoCountOutputTypeArgs
  }

  export type produtoGetPayload<
    S extends boolean | null | undefined | produtoArgs,
    U = keyof S
      > = S extends true
        ? produto
    : S extends undefined
    ? never
    : S extends produtoArgs | produtoFindManyArgs
    ?'include' extends U
    ? produto  & {
    [P in TrueKeys<S['include']>]:
        P extends 'carrinho' ? Array < carrinhoGetPayload<S['include'][P]>>  :
        P extends 'vendedor' ? vendedorGetPayload<S['include'][P]> :
        P extends '_count' ? ProdutoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'carrinho' ? Array < carrinhoGetPayload<S['select'][P]>>  :
        P extends 'vendedor' ? vendedorGetPayload<S['select'][P]> :
        P extends '_count' ? ProdutoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof produto ? produto[P] : never
  } 
    : produto
  : produto


  type produtoCountArgs = Merge<
    Omit<produtoFindManyArgs, 'select' | 'include'> & {
      select?: ProdutoCountAggregateInputType | true
    }
  >

  export interface produtoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Produto that matches the filter.
     * @param {produtoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends produtoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, produtoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'produto'> extends True ? CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>> : CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends produtoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, produtoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'produto'> extends True ? CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>> : CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `idProduto`
     * const produtoWithIdProdutoOnly = await prisma.produto.findMany({ select: { idProduto: true } })
     * 
    **/
    findMany<T extends produtoFindManyArgs>(
      args?: SelectSubset<T, produtoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<produto>>, PrismaPromise<Array<produtoGetPayload<T>>>>

    /**
     * Create a Produto.
     * @param {produtoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends produtoCreateArgs>(
      args: SelectSubset<T, produtoCreateArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Create many Produtos.
     *     @param {produtoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends produtoCreateManyArgs>(
      args?: SelectSubset<T, produtoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {produtoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends produtoDeleteArgs>(
      args: SelectSubset<T, produtoDeleteArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Update one Produto.
     * @param {produtoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends produtoUpdateArgs>(
      args: SelectSubset<T, produtoUpdateArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Delete zero or more Produtos.
     * @param {produtoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends produtoDeleteManyArgs>(
      args?: SelectSubset<T, produtoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends produtoUpdateManyArgs>(
      args: SelectSubset<T, produtoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {produtoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends produtoUpsertArgs>(
      args: SelectSubset<T, produtoUpsertArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends produtoCountArgs>(
      args?: Subset<T, produtoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__produtoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    carrinho<T extends carrinhoFindManyArgs = {}>(args?: Subset<T, carrinhoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<carrinho>>, PrismaPromise<Array<carrinhoGetPayload<T>>>>;

    vendedor<T extends vendedorArgs = {}>(args?: Subset<T, vendedorArgs>): CheckSelect<T, Prisma__vendedorClient<vendedor | null >, Prisma__vendedorClient<vendedorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * produto findUnique
   */
  export type produtoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * Throw an Error if a produto can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which produto to fetch.
     * 
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto findFirst
   */
  export type produtoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * Throw an Error if a produto can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which produto to fetch.
     * 
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for produtos.
     * 
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of produtos.
     * 
    **/
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * produto findMany
   */
  export type produtoFindManyArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * Filter, which produtos to fetch.
     * 
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing produtos.
     * 
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * produto create
   */
  export type produtoCreateArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * The data needed to create a produto.
     * 
    **/
    data: XOR<produtoCreateInput, produtoUncheckedCreateInput>
  }


  /**
   * produto createMany
   */
  export type produtoCreateManyArgs = {
    /**
     * The data used to create many produtos.
     * 
    **/
    data: Enumerable<produtoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * produto update
   */
  export type produtoUpdateArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * The data needed to update a produto.
     * 
    **/
    data: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
    /**
     * Choose, which produto to update.
     * 
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto updateMany
   */
  export type produtoUpdateManyArgs = {
    /**
     * The data used to update produtos.
     * 
    **/
    data: XOR<produtoUpdateManyMutationInput, produtoUncheckedUpdateManyInput>
    /**
     * Filter which produtos to update
     * 
    **/
    where?: produtoWhereInput
  }


  /**
   * produto upsert
   */
  export type produtoUpsertArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * The filter to search for the produto to update in case it exists.
     * 
    **/
    where: produtoWhereUniqueInput
    /**
     * In case the produto found by the `where` argument doesn't exist, create a new produto with this data.
     * 
    **/
    create: XOR<produtoCreateInput, produtoUncheckedCreateInput>
    /**
     * In case the produto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
  }


  /**
   * produto delete
   */
  export type produtoDeleteArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
    /**
     * Filter which produto to delete.
     * 
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto deleteMany
   */
  export type produtoDeleteManyArgs = {
    /**
     * Filter which produtos to delete
     * 
    **/
    where?: produtoWhereInput
  }


  /**
   * produto without action
   */
  export type produtoArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: produtoInclude | null
  }



  /**
   * Model usuario
   */


  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    idUsuario: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    idUsuario: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    idUsuario: number | null
    nomeUsuario: string | null
    emailUsuario: string | null
    cpfUsuario: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    idUsuario: number | null
    nomeUsuario: string | null
    emailUsuario: string | null
    cpfUsuario: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    idUsuario: number
    nomeUsuario: number
    emailUsuario: number
    cpfUsuario: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    idUsuario?: true
  }

  export type UsuarioSumAggregateInputType = {
    idUsuario?: true
  }

  export type UsuarioMinAggregateInputType = {
    idUsuario?: true
    nomeUsuario?: true
    emailUsuario?: true
    cpfUsuario?: true
  }

  export type UsuarioMaxAggregateInputType = {
    idUsuario?: true
    nomeUsuario?: true
    emailUsuario?: true
    cpfUsuario?: true
  }

  export type UsuarioCountAggregateInputType = {
    idUsuario?: true
    nomeUsuario?: true
    emailUsuario?: true
    cpfUsuario?: true
    _all?: true
  }

  export type UsuarioAggregateArgs = {
    /**
     * Filter which usuario to aggregate.
     * 
    **/
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs = {
    where?: usuarioWhereInput
    orderBy?: Enumerable<usuarioOrderByWithAggregationInput>
    by: Array<UsuarioScalarFieldEnum>
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }


  export type UsuarioGroupByOutputType = {
    idUsuario: number
    nomeUsuario: string
    emailUsuario: string
    cpfUsuario: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect = {
    idUsuario?: boolean
    nomeUsuario?: boolean
    emailUsuario?: boolean
    cpfUsuario?: boolean
    comprador?: boolean | compradorFindManyArgs
    vendedor?: boolean | vendedorFindManyArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type usuarioInclude = {
    comprador?: boolean | compradorFindManyArgs
    vendedor?: boolean | vendedorFindManyArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type usuarioGetPayload<
    S extends boolean | null | undefined | usuarioArgs,
    U = keyof S
      > = S extends true
        ? usuario
    : S extends undefined
    ? never
    : S extends usuarioArgs | usuarioFindManyArgs
    ?'include' extends U
    ? usuario  & {
    [P in TrueKeys<S['include']>]:
        P extends 'comprador' ? Array < compradorGetPayload<S['include'][P]>>  :
        P extends 'vendedor' ? Array < vendedorGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'comprador' ? Array < compradorGetPayload<S['select'][P]>>  :
        P extends 'vendedor' ? Array < vendedorGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof usuario ? usuario[P] : never
  } 
    : usuario
  : usuario


  type usuarioCountArgs = Merge<
    Omit<usuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }
  >

  export interface usuarioDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'usuario'> extends True ? CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>> : CheckSelect<T, Prisma__usuarioClient<usuario | null >, Prisma__usuarioClient<usuarioGetPayload<T> | null >>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'usuario'> extends True ? CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>> : CheckSelect<T, Prisma__usuarioClient<usuario | null >, Prisma__usuarioClient<usuarioGetPayload<T> | null >>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `idUsuario`
     * const usuarioWithIdUsuarioOnly = await prisma.usuario.findMany({ select: { idUsuario: true } })
     * 
    **/
    findMany<T extends usuarioFindManyArgs>(
      args?: SelectSubset<T, usuarioFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<usuario>>, PrismaPromise<Array<usuarioGetPayload<T>>>>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends usuarioCreateArgs>(
      args: SelectSubset<T, usuarioCreateArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Create many Usuarios.
     *     @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuarioCreateManyArgs>(
      args?: SelectSubset<T, usuarioCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends usuarioDeleteArgs>(
      args: SelectSubset<T, usuarioDeleteArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuarioUpdateArgs>(
      args: SelectSubset<T, usuarioUpdateArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuarioDeleteManyArgs>(
      args?: SelectSubset<T, usuarioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuarioUpdateManyArgs>(
      args: SelectSubset<T, usuarioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends usuarioUpsertArgs>(
      args: SelectSubset<T, usuarioUpsertArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usuarioClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    comprador<T extends compradorFindManyArgs = {}>(args?: Subset<T, compradorFindManyArgs>): CheckSelect<T, PrismaPromise<Array<comprador>>, PrismaPromise<Array<compradorGetPayload<T>>>>;

    vendedor<T extends vendedorFindManyArgs = {}>(args?: Subset<T, vendedorFindManyArgs>): CheckSelect<T, PrismaPromise<Array<vendedor>>, PrismaPromise<Array<vendedorGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * Throw an Error if a usuario can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which usuario to fetch.
     * 
    **/
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * Throw an Error if a usuario can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which usuario to fetch.
     * 
    **/
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     * 
    **/
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     * 
    **/
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * Filter, which usuarios to fetch.
     * 
    **/
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     * 
    **/
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * usuario create
   */
  export type usuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * The data needed to create a usuario.
     * 
    **/
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }


  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs = {
    /**
     * The data used to create many usuarios.
     * 
    **/
    data: Enumerable<usuarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * usuario update
   */
  export type usuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * The data needed to update a usuario.
     * 
    **/
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     * 
    **/
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs = {
    /**
     * The data used to update usuarios.
     * 
    **/
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     * 
    **/
    where?: usuarioWhereInput
  }


  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * The filter to search for the usuario to update in case it exists.
     * 
    **/
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     * 
    **/
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }


  /**
   * usuario delete
   */
  export type usuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * Filter which usuario to delete.
     * 
    **/
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs = {
    /**
     * Filter which usuarios to delete
     * 
    **/
    where?: usuarioWhereInput
  }


  /**
   * usuario without action
   */
  export type usuarioArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
  }



  /**
   * Model vendedor
   */


  export type AggregateVendedor = {
    _count: VendedorCountAggregateOutputType | null
    _avg: VendedorAvgAggregateOutputType | null
    _sum: VendedorSumAggregateOutputType | null
    _min: VendedorMinAggregateOutputType | null
    _max: VendedorMaxAggregateOutputType | null
  }

  export type VendedorAvgAggregateOutputType = {
    idVendedor: number | null
    Usuario_idUsuario: number | null
  }

  export type VendedorSumAggregateOutputType = {
    idVendedor: number | null
    Usuario_idUsuario: number | null
  }

  export type VendedorMinAggregateOutputType = {
    idVendedor: number | null
    razaosocialVendedor: string | null
    Usuario_idUsuario: number | null
  }

  export type VendedorMaxAggregateOutputType = {
    idVendedor: number | null
    razaosocialVendedor: string | null
    Usuario_idUsuario: number | null
  }

  export type VendedorCountAggregateOutputType = {
    idVendedor: number
    razaosocialVendedor: number
    Usuario_idUsuario: number
    _all: number
  }


  export type VendedorAvgAggregateInputType = {
    idVendedor?: true
    Usuario_idUsuario?: true
  }

  export type VendedorSumAggregateInputType = {
    idVendedor?: true
    Usuario_idUsuario?: true
  }

  export type VendedorMinAggregateInputType = {
    idVendedor?: true
    razaosocialVendedor?: true
    Usuario_idUsuario?: true
  }

  export type VendedorMaxAggregateInputType = {
    idVendedor?: true
    razaosocialVendedor?: true
    Usuario_idUsuario?: true
  }

  export type VendedorCountAggregateInputType = {
    idVendedor?: true
    razaosocialVendedor?: true
    Usuario_idUsuario?: true
    _all?: true
  }

  export type VendedorAggregateArgs = {
    /**
     * Filter which vendedor to aggregate.
     * 
    **/
    where?: vendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendedors to fetch.
     * 
    **/
    orderBy?: Enumerable<vendedorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: vendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendedors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendedors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned vendedors
    **/
    _count?: true | VendedorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendedorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendedorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendedorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendedorMaxAggregateInputType
  }

  export type GetVendedorAggregateType<T extends VendedorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendedor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendedor[P]>
      : GetScalarType<T[P], AggregateVendedor[P]>
  }




  export type VendedorGroupByArgs = {
    where?: vendedorWhereInput
    orderBy?: Enumerable<vendedorOrderByWithAggregationInput>
    by: Array<VendedorScalarFieldEnum>
    having?: vendedorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendedorCountAggregateInputType | true
    _avg?: VendedorAvgAggregateInputType
    _sum?: VendedorSumAggregateInputType
    _min?: VendedorMinAggregateInputType
    _max?: VendedorMaxAggregateInputType
  }


  export type VendedorGroupByOutputType = {
    idVendedor: number
    razaosocialVendedor: string
    Usuario_idUsuario: number
    _count: VendedorCountAggregateOutputType | null
    _avg: VendedorAvgAggregateOutputType | null
    _sum: VendedorSumAggregateOutputType | null
    _min: VendedorMinAggregateOutputType | null
    _max: VendedorMaxAggregateOutputType | null
  }

  type GetVendedorGroupByPayload<T extends VendedorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VendedorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendedorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendedorGroupByOutputType[P]>
            : GetScalarType<T[P], VendedorGroupByOutputType[P]>
        }
      >
    >


  export type vendedorSelect = {
    idVendedor?: boolean
    razaosocialVendedor?: boolean
    Usuario_idUsuario?: boolean
    produto?: boolean | produtoFindManyArgs
    usuario?: boolean | usuarioArgs
    _count?: boolean | VendedorCountOutputTypeArgs
  }

  export type vendedorInclude = {
    produto?: boolean | produtoFindManyArgs
    usuario?: boolean | usuarioArgs
    _count?: boolean | VendedorCountOutputTypeArgs
  }

  export type vendedorGetPayload<
    S extends boolean | null | undefined | vendedorArgs,
    U = keyof S
      > = S extends true
        ? vendedor
    : S extends undefined
    ? never
    : S extends vendedorArgs | vendedorFindManyArgs
    ?'include' extends U
    ? vendedor  & {
    [P in TrueKeys<S['include']>]:
        P extends 'produto' ? Array < produtoGetPayload<S['include'][P]>>  :
        P extends 'usuario' ? usuarioGetPayload<S['include'][P]> :
        P extends '_count' ? VendedorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'produto' ? Array < produtoGetPayload<S['select'][P]>>  :
        P extends 'usuario' ? usuarioGetPayload<S['select'][P]> :
        P extends '_count' ? VendedorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof vendedor ? vendedor[P] : never
  } 
    : vendedor
  : vendedor


  type vendedorCountArgs = Merge<
    Omit<vendedorFindManyArgs, 'select' | 'include'> & {
      select?: VendedorCountAggregateInputType | true
    }
  >

  export interface vendedorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Vendedor that matches the filter.
     * @param {vendedorFindUniqueArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends vendedorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, vendedorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'vendedor'> extends True ? CheckSelect<T, Prisma__vendedorClient<vendedor>, Prisma__vendedorClient<vendedorGetPayload<T>>> : CheckSelect<T, Prisma__vendedorClient<vendedor | null >, Prisma__vendedorClient<vendedorGetPayload<T> | null >>

    /**
     * Find the first Vendedor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorFindFirstArgs} args - Arguments to find a Vendedor
     * @example
     * // Get one Vendedor
     * const vendedor = await prisma.vendedor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends vendedorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, vendedorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'vendedor'> extends True ? CheckSelect<T, Prisma__vendedorClient<vendedor>, Prisma__vendedorClient<vendedorGetPayload<T>>> : CheckSelect<T, Prisma__vendedorClient<vendedor | null >, Prisma__vendedorClient<vendedorGetPayload<T> | null >>

    /**
     * Find zero or more Vendedors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendedors
     * const vendedors = await prisma.vendedor.findMany()
     * 
     * // Get first 10 Vendedors
     * const vendedors = await prisma.vendedor.findMany({ take: 10 })
     * 
     * // Only select the `idVendedor`
     * const vendedorWithIdVendedorOnly = await prisma.vendedor.findMany({ select: { idVendedor: true } })
     * 
    **/
    findMany<T extends vendedorFindManyArgs>(
      args?: SelectSubset<T, vendedorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<vendedor>>, PrismaPromise<Array<vendedorGetPayload<T>>>>

    /**
     * Create a Vendedor.
     * @param {vendedorCreateArgs} args - Arguments to create a Vendedor.
     * @example
     * // Create one Vendedor
     * const Vendedor = await prisma.vendedor.create({
     *   data: {
     *     // ... data to create a Vendedor
     *   }
     * })
     * 
    **/
    create<T extends vendedorCreateArgs>(
      args: SelectSubset<T, vendedorCreateArgs>
    ): CheckSelect<T, Prisma__vendedorClient<vendedor>, Prisma__vendedorClient<vendedorGetPayload<T>>>

    /**
     * Create many Vendedors.
     *     @param {vendedorCreateManyArgs} args - Arguments to create many Vendedors.
     *     @example
     *     // Create many Vendedors
     *     const vendedor = await prisma.vendedor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends vendedorCreateManyArgs>(
      args?: SelectSubset<T, vendedorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vendedor.
     * @param {vendedorDeleteArgs} args - Arguments to delete one Vendedor.
     * @example
     * // Delete one Vendedor
     * const Vendedor = await prisma.vendedor.delete({
     *   where: {
     *     // ... filter to delete one Vendedor
     *   }
     * })
     * 
    **/
    delete<T extends vendedorDeleteArgs>(
      args: SelectSubset<T, vendedorDeleteArgs>
    ): CheckSelect<T, Prisma__vendedorClient<vendedor>, Prisma__vendedorClient<vendedorGetPayload<T>>>

    /**
     * Update one Vendedor.
     * @param {vendedorUpdateArgs} args - Arguments to update one Vendedor.
     * @example
     * // Update one Vendedor
     * const vendedor = await prisma.vendedor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends vendedorUpdateArgs>(
      args: SelectSubset<T, vendedorUpdateArgs>
    ): CheckSelect<T, Prisma__vendedorClient<vendedor>, Prisma__vendedorClient<vendedorGetPayload<T>>>

    /**
     * Delete zero or more Vendedors.
     * @param {vendedorDeleteManyArgs} args - Arguments to filter Vendedors to delete.
     * @example
     * // Delete a few Vendedors
     * const { count } = await prisma.vendedor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends vendedorDeleteManyArgs>(
      args?: SelectSubset<T, vendedorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendedors
     * const vendedor = await prisma.vendedor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends vendedorUpdateManyArgs>(
      args: SelectSubset<T, vendedorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendedor.
     * @param {vendedorUpsertArgs} args - Arguments to update or create a Vendedor.
     * @example
     * // Update or create a Vendedor
     * const vendedor = await prisma.vendedor.upsert({
     *   create: {
     *     // ... data to create a Vendedor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendedor we want to update
     *   }
     * })
    **/
    upsert<T extends vendedorUpsertArgs>(
      args: SelectSubset<T, vendedorUpsertArgs>
    ): CheckSelect<T, Prisma__vendedorClient<vendedor>, Prisma__vendedorClient<vendedorGetPayload<T>>>

    /**
     * Count the number of Vendedors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vendedorCountArgs} args - Arguments to filter Vendedors to count.
     * @example
     * // Count the number of Vendedors
     * const count = await prisma.vendedor.count({
     *   where: {
     *     // ... the filter for the Vendedors we want to count
     *   }
     * })
    **/
    count<T extends vendedorCountArgs>(
      args?: Subset<T, vendedorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendedorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendedorAggregateArgs>(args: Subset<T, VendedorAggregateArgs>): PrismaPromise<GetVendedorAggregateType<T>>

    /**
     * Group by Vendedor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendedorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendedorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendedorGroupByArgs['orderBy'] }
        : { orderBy?: VendedorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendedorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendedorGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for vendedor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__vendedorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    produto<T extends produtoFindManyArgs = {}>(args?: Subset<T, produtoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<produto>>, PrismaPromise<Array<produtoGetPayload<T>>>>;

    usuario<T extends usuarioArgs = {}>(args?: Subset<T, usuarioArgs>): CheckSelect<T, Prisma__usuarioClient<usuario | null >, Prisma__usuarioClient<usuarioGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * vendedor findUnique
   */
  export type vendedorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the vendedor
     * 
    **/
    select?: vendedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendedorInclude | null
    /**
     * Throw an Error if a vendedor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which vendedor to fetch.
     * 
    **/
    where: vendedorWhereUniqueInput
  }


  /**
   * vendedor findFirst
   */
  export type vendedorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the vendedor
     * 
    **/
    select?: vendedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendedorInclude | null
    /**
     * Throw an Error if a vendedor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which vendedor to fetch.
     * 
    **/
    where?: vendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendedors to fetch.
     * 
    **/
    orderBy?: Enumerable<vendedorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vendedors.
     * 
    **/
    cursor?: vendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendedors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendedors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vendedors.
     * 
    **/
    distinct?: Enumerable<VendedorScalarFieldEnum>
  }


  /**
   * vendedor findMany
   */
  export type vendedorFindManyArgs = {
    /**
     * Select specific fields to fetch from the vendedor
     * 
    **/
    select?: vendedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendedorInclude | null
    /**
     * Filter, which vendedors to fetch.
     * 
    **/
    where?: vendedorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vendedors to fetch.
     * 
    **/
    orderBy?: Enumerable<vendedorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing vendedors.
     * 
    **/
    cursor?: vendedorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vendedors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vendedors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VendedorScalarFieldEnum>
  }


  /**
   * vendedor create
   */
  export type vendedorCreateArgs = {
    /**
     * Select specific fields to fetch from the vendedor
     * 
    **/
    select?: vendedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendedorInclude | null
    /**
     * The data needed to create a vendedor.
     * 
    **/
    data: XOR<vendedorCreateInput, vendedorUncheckedCreateInput>
  }


  /**
   * vendedor createMany
   */
  export type vendedorCreateManyArgs = {
    /**
     * The data used to create many vendedors.
     * 
    **/
    data: Enumerable<vendedorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * vendedor update
   */
  export type vendedorUpdateArgs = {
    /**
     * Select specific fields to fetch from the vendedor
     * 
    **/
    select?: vendedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendedorInclude | null
    /**
     * The data needed to update a vendedor.
     * 
    **/
    data: XOR<vendedorUpdateInput, vendedorUncheckedUpdateInput>
    /**
     * Choose, which vendedor to update.
     * 
    **/
    where: vendedorWhereUniqueInput
  }


  /**
   * vendedor updateMany
   */
  export type vendedorUpdateManyArgs = {
    /**
     * The data used to update vendedors.
     * 
    **/
    data: XOR<vendedorUpdateManyMutationInput, vendedorUncheckedUpdateManyInput>
    /**
     * Filter which vendedors to update
     * 
    **/
    where?: vendedorWhereInput
  }


  /**
   * vendedor upsert
   */
  export type vendedorUpsertArgs = {
    /**
     * Select specific fields to fetch from the vendedor
     * 
    **/
    select?: vendedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendedorInclude | null
    /**
     * The filter to search for the vendedor to update in case it exists.
     * 
    **/
    where: vendedorWhereUniqueInput
    /**
     * In case the vendedor found by the `where` argument doesn't exist, create a new vendedor with this data.
     * 
    **/
    create: XOR<vendedorCreateInput, vendedorUncheckedCreateInput>
    /**
     * In case the vendedor was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<vendedorUpdateInput, vendedorUncheckedUpdateInput>
  }


  /**
   * vendedor delete
   */
  export type vendedorDeleteArgs = {
    /**
     * Select specific fields to fetch from the vendedor
     * 
    **/
    select?: vendedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendedorInclude | null
    /**
     * Filter which vendedor to delete.
     * 
    **/
    where: vendedorWhereUniqueInput
  }


  /**
   * vendedor deleteMany
   */
  export type vendedorDeleteManyArgs = {
    /**
     * Filter which vendedors to delete
     * 
    **/
    where?: vendedorWhereInput
  }


  /**
   * vendedor without action
   */
  export type vendedorArgs = {
    /**
     * Select specific fields to fetch from the vendedor
     * 
    **/
    select?: vendedorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: vendedorInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Avalia__oScalarFieldEnum: {
    idAvalia__o: 'idAvalia__o',
    notaAvaliacao: 'notaAvaliacao',
    comentarioAvaliacao: 'comentarioAvaliacao',
    Comprador_idComprador: 'Comprador_idComprador',
    Comprador_Usuario_idUsuario: 'Comprador_Usuario_idUsuario',
    Produto_idProduto: 'Produto_idProduto',
    Produto_Vendedor_idVendedor: 'Produto_Vendedor_idVendedor',
    Produto_Comprador_idComprador: 'Produto_Comprador_idComprador',
    Produto_Comprador_Usuario_idUsuario: 'Produto_Comprador_Usuario_idUsuario'
  };

  export type Avalia__oScalarFieldEnum = (typeof Avalia__oScalarFieldEnum)[keyof typeof Avalia__oScalarFieldEnum]


  export const CarrinhoScalarFieldEnum: {
    idcarrinho: 'idcarrinho',
    idUsuario: 'idUsuario',
    idProduto: 'idProduto',
    quantidade: 'quantidade'
  };

  export type CarrinhoScalarFieldEnum = (typeof CarrinhoScalarFieldEnum)[keyof typeof CarrinhoScalarFieldEnum]


  export const CompradorScalarFieldEnum: {
    idComprador: 'idComprador',
    cpfcnpjComprador: 'cpfcnpjComprador',
    nomeComprador: 'nomeComprador',
    Usuario_idUsuario: 'Usuario_idUsuario'
  };

  export type CompradorScalarFieldEnum = (typeof CompradorScalarFieldEnum)[keyof typeof CompradorScalarFieldEnum]


  export const EntregaScalarFieldEnum: {
    idEntrega: 'idEntrega',
    prazoEntrega: 'prazoEntrega',
    statusEntrega: 'statusEntrega',
    Pagamento_idPagamento: 'Pagamento_idPagamento'
  };

  export type EntregaScalarFieldEnum = (typeof EntregaScalarFieldEnum)[keyof typeof EntregaScalarFieldEnum]


  export const PagamentoScalarFieldEnum: {
    idPagamento: 'idPagamento',
    valorPagamento: 'valorPagamento',
    formaPagamento: 'formaPagamento',
    statusPagamento: 'statusPagamento',
    Comprador_idComprador: 'Comprador_idComprador',
    Comprador_Usuario_idUsuario: 'Comprador_Usuario_idUsuario'
  };

  export type PagamentoScalarFieldEnum = (typeof PagamentoScalarFieldEnum)[keyof typeof PagamentoScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    idProduto: 'idProduto',
    compensa_aoProduto: 'compensa_aoProduto',
    descProduto: 'descProduto',
    categoriaProduto: 'categoriaProduto',
    precoProduto: 'precoProduto',
    Vendedor_idVendedor: 'Vendedor_idVendedor',
    quantidadeVendida: 'quantidadeVendida',
    createdAt: 'createdAt'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    idUsuario: 'idUsuario',
    nomeUsuario: 'nomeUsuario',
    emailUsuario: 'emailUsuario',
    cpfUsuario: 'cpfUsuario'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const VendedorScalarFieldEnum: {
    idVendedor: 'idVendedor',
    razaosocialVendedor: 'razaosocialVendedor',
    Usuario_idUsuario: 'Usuario_idUsuario'
  };

  export type VendedorScalarFieldEnum = (typeof VendedorScalarFieldEnum)[keyof typeof VendedorScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type avalia__oWhereInput = {
    AND?: Enumerable<avalia__oWhereInput>
    OR?: Enumerable<avalia__oWhereInput>
    NOT?: Enumerable<avalia__oWhereInput>
    idAvalia__o?: IntFilter | number
    notaAvaliacao?: StringNullableFilter | string | null
    comentarioAvaliacao?: StringNullableFilter | string | null
    Comprador_idComprador?: IntFilter | number
    Comprador_Usuario_idUsuario?: IntFilter | number
    Produto_idProduto?: IntFilter | number
    Produto_Vendedor_idVendedor?: IntFilter | number
    Produto_Comprador_idComprador?: IntFilter | number
    Produto_Comprador_Usuario_idUsuario?: IntFilter | number
  }

  export type avalia__oOrderByWithRelationInput = {
    idAvalia__o?: SortOrder
    notaAvaliacao?: SortOrder
    comentarioAvaliacao?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
    Produto_idProduto?: SortOrder
    Produto_Vendedor_idVendedor?: SortOrder
    Produto_Comprador_idComprador?: SortOrder
    Produto_Comprador_Usuario_idUsuario?: SortOrder
  }

  export type avalia__oWhereUniqueInput = {
    idAvalia__o?: number
  }

  export type avalia__oOrderByWithAggregationInput = {
    idAvalia__o?: SortOrder
    notaAvaliacao?: SortOrder
    comentarioAvaliacao?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
    Produto_idProduto?: SortOrder
    Produto_Vendedor_idVendedor?: SortOrder
    Produto_Comprador_idComprador?: SortOrder
    Produto_Comprador_Usuario_idUsuario?: SortOrder
    _count?: avalia__oCountOrderByAggregateInput
    _avg?: avalia__oAvgOrderByAggregateInput
    _max?: avalia__oMaxOrderByAggregateInput
    _min?: avalia__oMinOrderByAggregateInput
    _sum?: avalia__oSumOrderByAggregateInput
  }

  export type avalia__oScalarWhereWithAggregatesInput = {
    AND?: Enumerable<avalia__oScalarWhereWithAggregatesInput>
    OR?: Enumerable<avalia__oScalarWhereWithAggregatesInput>
    NOT?: Enumerable<avalia__oScalarWhereWithAggregatesInput>
    idAvalia__o?: IntWithAggregatesFilter | number
    notaAvaliacao?: StringNullableWithAggregatesFilter | string | null
    comentarioAvaliacao?: StringNullableWithAggregatesFilter | string | null
    Comprador_idComprador?: IntWithAggregatesFilter | number
    Comprador_Usuario_idUsuario?: IntWithAggregatesFilter | number
    Produto_idProduto?: IntWithAggregatesFilter | number
    Produto_Vendedor_idVendedor?: IntWithAggregatesFilter | number
    Produto_Comprador_idComprador?: IntWithAggregatesFilter | number
    Produto_Comprador_Usuario_idUsuario?: IntWithAggregatesFilter | number
  }

  export type carrinhoWhereInput = {
    AND?: Enumerable<carrinhoWhereInput>
    OR?: Enumerable<carrinhoWhereInput>
    NOT?: Enumerable<carrinhoWhereInput>
    idcarrinho?: IntFilter | number
    idUsuario?: IntFilter | number
    idProduto?: IntFilter | number
    quantidade?: IntFilter | number
    produto?: XOR<ProdutoRelationFilter, produtoWhereInput>
  }

  export type carrinhoOrderByWithRelationInput = {
    idcarrinho?: SortOrder
    idUsuario?: SortOrder
    idProduto?: SortOrder
    quantidade?: SortOrder
    produto?: produtoOrderByWithRelationInput
  }

  export type carrinhoWhereUniqueInput = {
    idcarrinho_idUsuario_idProduto?: carrinhoIdcarrinhoIdUsuarioIdProdutoCompoundUniqueInput
  }

  export type carrinhoOrderByWithAggregationInput = {
    idcarrinho?: SortOrder
    idUsuario?: SortOrder
    idProduto?: SortOrder
    quantidade?: SortOrder
    _count?: carrinhoCountOrderByAggregateInput
    _avg?: carrinhoAvgOrderByAggregateInput
    _max?: carrinhoMaxOrderByAggregateInput
    _min?: carrinhoMinOrderByAggregateInput
    _sum?: carrinhoSumOrderByAggregateInput
  }

  export type carrinhoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<carrinhoScalarWhereWithAggregatesInput>
    OR?: Enumerable<carrinhoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<carrinhoScalarWhereWithAggregatesInput>
    idcarrinho?: IntWithAggregatesFilter | number
    idUsuario?: IntWithAggregatesFilter | number
    idProduto?: IntWithAggregatesFilter | number
    quantidade?: IntWithAggregatesFilter | number
  }

  export type compradorWhereInput = {
    AND?: Enumerable<compradorWhereInput>
    OR?: Enumerable<compradorWhereInput>
    NOT?: Enumerable<compradorWhereInput>
    idComprador?: IntFilter | number
    cpfcnpjComprador?: StringFilter | string
    nomeComprador?: StringFilter | string
    Usuario_idUsuario?: IntFilter | number
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    pagamento?: PagamentoListRelationFilter
  }

  export type compradorOrderByWithRelationInput = {
    idComprador?: SortOrder
    cpfcnpjComprador?: SortOrder
    nomeComprador?: SortOrder
    Usuario_idUsuario?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
    pagamento?: pagamentoOrderByRelationAggregateInput
  }

  export type compradorWhereUniqueInput = {
    idComprador_Usuario_idUsuario?: compradorIdCompradorUsuario_idUsuarioCompoundUniqueInput
  }

  export type compradorOrderByWithAggregationInput = {
    idComprador?: SortOrder
    cpfcnpjComprador?: SortOrder
    nomeComprador?: SortOrder
    Usuario_idUsuario?: SortOrder
    _count?: compradorCountOrderByAggregateInput
    _avg?: compradorAvgOrderByAggregateInput
    _max?: compradorMaxOrderByAggregateInput
    _min?: compradorMinOrderByAggregateInput
    _sum?: compradorSumOrderByAggregateInput
  }

  export type compradorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<compradorScalarWhereWithAggregatesInput>
    OR?: Enumerable<compradorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<compradorScalarWhereWithAggregatesInput>
    idComprador?: IntWithAggregatesFilter | number
    cpfcnpjComprador?: StringWithAggregatesFilter | string
    nomeComprador?: StringWithAggregatesFilter | string
    Usuario_idUsuario?: IntWithAggregatesFilter | number
  }

  export type entregaWhereInput = {
    AND?: Enumerable<entregaWhereInput>
    OR?: Enumerable<entregaWhereInput>
    NOT?: Enumerable<entregaWhereInput>
    idEntrega?: IntFilter | number
    prazoEntrega?: StringNullableFilter | string | null
    statusEntrega?: StringFilter | string
    Pagamento_idPagamento?: IntFilter | number
    pagamento?: XOR<PagamentoRelationFilter, pagamentoWhereInput>
  }

  export type entregaOrderByWithRelationInput = {
    idEntrega?: SortOrder
    prazoEntrega?: SortOrder
    statusEntrega?: SortOrder
    Pagamento_idPagamento?: SortOrder
    pagamento?: pagamentoOrderByWithRelationInput
  }

  export type entregaWhereUniqueInput = {
    idEntrega_Pagamento_idPagamento?: entregaIdEntregaPagamento_idPagamentoCompoundUniqueInput
  }

  export type entregaOrderByWithAggregationInput = {
    idEntrega?: SortOrder
    prazoEntrega?: SortOrder
    statusEntrega?: SortOrder
    Pagamento_idPagamento?: SortOrder
    _count?: entregaCountOrderByAggregateInput
    _avg?: entregaAvgOrderByAggregateInput
    _max?: entregaMaxOrderByAggregateInput
    _min?: entregaMinOrderByAggregateInput
    _sum?: entregaSumOrderByAggregateInput
  }

  export type entregaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<entregaScalarWhereWithAggregatesInput>
    OR?: Enumerable<entregaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<entregaScalarWhereWithAggregatesInput>
    idEntrega?: IntWithAggregatesFilter | number
    prazoEntrega?: StringNullableWithAggregatesFilter | string | null
    statusEntrega?: StringWithAggregatesFilter | string
    Pagamento_idPagamento?: IntWithAggregatesFilter | number
  }

  export type pagamentoWhereInput = {
    AND?: Enumerable<pagamentoWhereInput>
    OR?: Enumerable<pagamentoWhereInput>
    NOT?: Enumerable<pagamentoWhereInput>
    idPagamento?: IntFilter | number
    valorPagamento?: StringFilter | string
    formaPagamento?: StringFilter | string
    statusPagamento?: StringFilter | string
    Comprador_idComprador?: IntFilter | number
    Comprador_Usuario_idUsuario?: IntFilter | number
    entrega?: EntregaListRelationFilter
    comprador?: XOR<CompradorRelationFilter, compradorWhereInput>
  }

  export type pagamentoOrderByWithRelationInput = {
    idPagamento?: SortOrder
    valorPagamento?: SortOrder
    formaPagamento?: SortOrder
    statusPagamento?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
    entrega?: entregaOrderByRelationAggregateInput
    comprador?: compradorOrderByWithRelationInput
  }

  export type pagamentoWhereUniqueInput = {
    idPagamento?: number
  }

  export type pagamentoOrderByWithAggregationInput = {
    idPagamento?: SortOrder
    valorPagamento?: SortOrder
    formaPagamento?: SortOrder
    statusPagamento?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
    _count?: pagamentoCountOrderByAggregateInput
    _avg?: pagamentoAvgOrderByAggregateInput
    _max?: pagamentoMaxOrderByAggregateInput
    _min?: pagamentoMinOrderByAggregateInput
    _sum?: pagamentoSumOrderByAggregateInput
  }

  export type pagamentoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<pagamentoScalarWhereWithAggregatesInput>
    OR?: Enumerable<pagamentoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<pagamentoScalarWhereWithAggregatesInput>
    idPagamento?: IntWithAggregatesFilter | number
    valorPagamento?: StringWithAggregatesFilter | string
    formaPagamento?: StringWithAggregatesFilter | string
    statusPagamento?: StringWithAggregatesFilter | string
    Comprador_idComprador?: IntWithAggregatesFilter | number
    Comprador_Usuario_idUsuario?: IntWithAggregatesFilter | number
  }

  export type produtoWhereInput = {
    AND?: Enumerable<produtoWhereInput>
    OR?: Enumerable<produtoWhereInput>
    NOT?: Enumerable<produtoWhereInput>
    idProduto?: IntFilter | number
    compensa_aoProduto?: StringFilter | string
    descProduto?: StringNullableFilter | string | null
    categoriaProduto?: StringNullableFilter | string | null
    precoProduto?: StringFilter | string
    Vendedor_idVendedor?: IntFilter | number
    quantidadeVendida?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    carrinho?: CarrinhoListRelationFilter
    vendedor?: XOR<VendedorRelationFilter, vendedorWhereInput>
  }

  export type produtoOrderByWithRelationInput = {
    idProduto?: SortOrder
    compensa_aoProduto?: SortOrder
    descProduto?: SortOrder
    categoriaProduto?: SortOrder
    precoProduto?: SortOrder
    Vendedor_idVendedor?: SortOrder
    quantidadeVendida?: SortOrder
    createdAt?: SortOrder
    carrinho?: carrinhoOrderByRelationAggregateInput
    vendedor?: vendedorOrderByWithRelationInput
  }

  export type produtoWhereUniqueInput = {
    idProduto?: number
    idProduto_Vendedor_idVendedor?: produtoIdProdutoVendedor_idVendedorCompoundUniqueInput
  }

  export type produtoOrderByWithAggregationInput = {
    idProduto?: SortOrder
    compensa_aoProduto?: SortOrder
    descProduto?: SortOrder
    categoriaProduto?: SortOrder
    precoProduto?: SortOrder
    Vendedor_idVendedor?: SortOrder
    quantidadeVendida?: SortOrder
    createdAt?: SortOrder
    _count?: produtoCountOrderByAggregateInput
    _avg?: produtoAvgOrderByAggregateInput
    _max?: produtoMaxOrderByAggregateInput
    _min?: produtoMinOrderByAggregateInput
    _sum?: produtoSumOrderByAggregateInput
  }

  export type produtoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<produtoScalarWhereWithAggregatesInput>
    OR?: Enumerable<produtoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<produtoScalarWhereWithAggregatesInput>
    idProduto?: IntWithAggregatesFilter | number
    compensa_aoProduto?: StringWithAggregatesFilter | string
    descProduto?: StringNullableWithAggregatesFilter | string | null
    categoriaProduto?: StringNullableWithAggregatesFilter | string | null
    precoProduto?: StringWithAggregatesFilter | string
    Vendedor_idVendedor?: IntWithAggregatesFilter | number
    quantidadeVendida?: IntNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type usuarioWhereInput = {
    AND?: Enumerable<usuarioWhereInput>
    OR?: Enumerable<usuarioWhereInput>
    NOT?: Enumerable<usuarioWhereInput>
    idUsuario?: IntFilter | number
    nomeUsuario?: StringFilter | string
    emailUsuario?: StringFilter | string
    cpfUsuario?: StringFilter | string
    comprador?: CompradorListRelationFilter
    vendedor?: VendedorListRelationFilter
  }

  export type usuarioOrderByWithRelationInput = {
    idUsuario?: SortOrder
    nomeUsuario?: SortOrder
    emailUsuario?: SortOrder
    cpfUsuario?: SortOrder
    comprador?: compradorOrderByRelationAggregateInput
    vendedor?: vendedorOrderByRelationAggregateInput
  }

  export type usuarioWhereUniqueInput = {
    idUsuario?: number
    cpfUsuario?: string
  }

  export type usuarioOrderByWithAggregationInput = {
    idUsuario?: SortOrder
    nomeUsuario?: SortOrder
    emailUsuario?: SortOrder
    cpfUsuario?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<usuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usuarioScalarWhereWithAggregatesInput>
    idUsuario?: IntWithAggregatesFilter | number
    nomeUsuario?: StringWithAggregatesFilter | string
    emailUsuario?: StringWithAggregatesFilter | string
    cpfUsuario?: StringWithAggregatesFilter | string
  }

  export type vendedorWhereInput = {
    AND?: Enumerable<vendedorWhereInput>
    OR?: Enumerable<vendedorWhereInput>
    NOT?: Enumerable<vendedorWhereInput>
    idVendedor?: IntFilter | number
    razaosocialVendedor?: StringFilter | string
    Usuario_idUsuario?: IntFilter | number
    produto?: ProdutoListRelationFilter
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type vendedorOrderByWithRelationInput = {
    idVendedor?: SortOrder
    razaosocialVendedor?: SortOrder
    Usuario_idUsuario?: SortOrder
    produto?: produtoOrderByRelationAggregateInput
    usuario?: usuarioOrderByWithRelationInput
  }

  export type vendedorWhereUniqueInput = {
    idVendedor?: number
  }

  export type vendedorOrderByWithAggregationInput = {
    idVendedor?: SortOrder
    razaosocialVendedor?: SortOrder
    Usuario_idUsuario?: SortOrder
    _count?: vendedorCountOrderByAggregateInput
    _avg?: vendedorAvgOrderByAggregateInput
    _max?: vendedorMaxOrderByAggregateInput
    _min?: vendedorMinOrderByAggregateInput
    _sum?: vendedorSumOrderByAggregateInput
  }

  export type vendedorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<vendedorScalarWhereWithAggregatesInput>
    OR?: Enumerable<vendedorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<vendedorScalarWhereWithAggregatesInput>
    idVendedor?: IntWithAggregatesFilter | number
    razaosocialVendedor?: StringWithAggregatesFilter | string
    Usuario_idUsuario?: IntWithAggregatesFilter | number
  }

  export type avalia__oCreateInput = {
    notaAvaliacao?: string | null
    comentarioAvaliacao?: string | null
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
    Produto_idProduto: number
    Produto_Vendedor_idVendedor: number
    Produto_Comprador_idComprador: number
    Produto_Comprador_Usuario_idUsuario: number
  }

  export type avalia__oUncheckedCreateInput = {
    idAvalia__o?: number
    notaAvaliacao?: string | null
    comentarioAvaliacao?: string | null
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
    Produto_idProduto: number
    Produto_Vendedor_idVendedor: number
    Produto_Comprador_idComprador: number
    Produto_Comprador_Usuario_idUsuario: number
  }

  export type avalia__oUpdateInput = {
    notaAvaliacao?: NullableStringFieldUpdateOperationsInput | string | null
    comentarioAvaliacao?: NullableStringFieldUpdateOperationsInput | string | null
    Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
    Produto_idProduto?: IntFieldUpdateOperationsInput | number
    Produto_Vendedor_idVendedor?: IntFieldUpdateOperationsInput | number
    Produto_Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Produto_Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type avalia__oUncheckedUpdateInput = {
    idAvalia__o?: IntFieldUpdateOperationsInput | number
    notaAvaliacao?: NullableStringFieldUpdateOperationsInput | string | null
    comentarioAvaliacao?: NullableStringFieldUpdateOperationsInput | string | null
    Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
    Produto_idProduto?: IntFieldUpdateOperationsInput | number
    Produto_Vendedor_idVendedor?: IntFieldUpdateOperationsInput | number
    Produto_Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Produto_Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type avalia__oCreateManyInput = {
    idAvalia__o?: number
    notaAvaliacao?: string | null
    comentarioAvaliacao?: string | null
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
    Produto_idProduto: number
    Produto_Vendedor_idVendedor: number
    Produto_Comprador_idComprador: number
    Produto_Comprador_Usuario_idUsuario: number
  }

  export type avalia__oUpdateManyMutationInput = {
    notaAvaliacao?: NullableStringFieldUpdateOperationsInput | string | null
    comentarioAvaliacao?: NullableStringFieldUpdateOperationsInput | string | null
    Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
    Produto_idProduto?: IntFieldUpdateOperationsInput | number
    Produto_Vendedor_idVendedor?: IntFieldUpdateOperationsInput | number
    Produto_Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Produto_Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type avalia__oUncheckedUpdateManyInput = {
    idAvalia__o?: IntFieldUpdateOperationsInput | number
    notaAvaliacao?: NullableStringFieldUpdateOperationsInput | string | null
    comentarioAvaliacao?: NullableStringFieldUpdateOperationsInput | string | null
    Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
    Produto_idProduto?: IntFieldUpdateOperationsInput | number
    Produto_Vendedor_idVendedor?: IntFieldUpdateOperationsInput | number
    Produto_Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Produto_Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type carrinhoCreateInput = {
    idcarrinho?: number
    idUsuario: number
    quantidade: number
    produto: produtoCreateNestedOneWithoutCarrinhoInput
  }

  export type carrinhoUncheckedCreateInput = {
    idcarrinho?: number
    idUsuario: number
    idProduto: number
    quantidade: number
  }

  export type carrinhoUpdateInput = {
    idcarrinho?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    produto?: produtoUpdateOneRequiredWithoutCarrinhoNestedInput
  }

  export type carrinhoUncheckedUpdateInput = {
    idcarrinho?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    idProduto?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type carrinhoCreateManyInput = {
    idcarrinho?: number
    idUsuario: number
    idProduto: number
    quantidade: number
  }

  export type carrinhoUpdateManyMutationInput = {
    idcarrinho?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type carrinhoUncheckedUpdateManyInput = {
    idcarrinho?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    idProduto?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type compradorCreateInput = {
    idComprador: number
    cpfcnpjComprador: string
    nomeComprador: string
    usuario: usuarioCreateNestedOneWithoutCompradorInput
    pagamento?: pagamentoCreateNestedManyWithoutCompradorInput
  }

  export type compradorUncheckedCreateInput = {
    idComprador: number
    cpfcnpjComprador: string
    nomeComprador: string
    Usuario_idUsuario: number
    pagamento?: pagamentoUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type compradorUpdateInput = {
    idComprador?: IntFieldUpdateOperationsInput | number
    cpfcnpjComprador?: StringFieldUpdateOperationsInput | string
    nomeComprador?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutCompradorNestedInput
    pagamento?: pagamentoUpdateManyWithoutCompradorNestedInput
  }

  export type compradorUncheckedUpdateInput = {
    idComprador?: IntFieldUpdateOperationsInput | number
    cpfcnpjComprador?: StringFieldUpdateOperationsInput | string
    nomeComprador?: StringFieldUpdateOperationsInput | string
    Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
    pagamento?: pagamentoUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type compradorCreateManyInput = {
    idComprador: number
    cpfcnpjComprador: string
    nomeComprador: string
    Usuario_idUsuario: number
  }

  export type compradorUpdateManyMutationInput = {
    idComprador?: IntFieldUpdateOperationsInput | number
    cpfcnpjComprador?: StringFieldUpdateOperationsInput | string
    nomeComprador?: StringFieldUpdateOperationsInput | string
  }

  export type compradorUncheckedUpdateManyInput = {
    idComprador?: IntFieldUpdateOperationsInput | number
    cpfcnpjComprador?: StringFieldUpdateOperationsInput | string
    nomeComprador?: StringFieldUpdateOperationsInput | string
    Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type entregaCreateInput = {
    idEntrega: number
    prazoEntrega?: string | null
    statusEntrega: string
    pagamento: pagamentoCreateNestedOneWithoutEntregaInput
  }

  export type entregaUncheckedCreateInput = {
    idEntrega: number
    prazoEntrega?: string | null
    statusEntrega: string
    Pagamento_idPagamento: number
  }

  export type entregaUpdateInput = {
    idEntrega?: IntFieldUpdateOperationsInput | number
    prazoEntrega?: NullableStringFieldUpdateOperationsInput | string | null
    statusEntrega?: StringFieldUpdateOperationsInput | string
    pagamento?: pagamentoUpdateOneRequiredWithoutEntregaNestedInput
  }

  export type entregaUncheckedUpdateInput = {
    idEntrega?: IntFieldUpdateOperationsInput | number
    prazoEntrega?: NullableStringFieldUpdateOperationsInput | string | null
    statusEntrega?: StringFieldUpdateOperationsInput | string
    Pagamento_idPagamento?: IntFieldUpdateOperationsInput | number
  }

  export type entregaCreateManyInput = {
    idEntrega: number
    prazoEntrega?: string | null
    statusEntrega: string
    Pagamento_idPagamento: number
  }

  export type entregaUpdateManyMutationInput = {
    idEntrega?: IntFieldUpdateOperationsInput | number
    prazoEntrega?: NullableStringFieldUpdateOperationsInput | string | null
    statusEntrega?: StringFieldUpdateOperationsInput | string
  }

  export type entregaUncheckedUpdateManyInput = {
    idEntrega?: IntFieldUpdateOperationsInput | number
    prazoEntrega?: NullableStringFieldUpdateOperationsInput | string | null
    statusEntrega?: StringFieldUpdateOperationsInput | string
    Pagamento_idPagamento?: IntFieldUpdateOperationsInput | number
  }

  export type pagamentoCreateInput = {
    idPagamento: number
    valorPagamento: string
    formaPagamento: string
    statusPagamento: string
    entrega?: entregaCreateNestedManyWithoutPagamentoInput
    comprador: compradorCreateNestedOneWithoutPagamentoInput
  }

  export type pagamentoUncheckedCreateInput = {
    idPagamento: number
    valorPagamento: string
    formaPagamento: string
    statusPagamento: string
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
    entrega?: entregaUncheckedCreateNestedManyWithoutPagamentoInput
  }

  export type pagamentoUpdateInput = {
    idPagamento?: IntFieldUpdateOperationsInput | number
    valorPagamento?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    statusPagamento?: StringFieldUpdateOperationsInput | string
    entrega?: entregaUpdateManyWithoutPagamentoNestedInput
    comprador?: compradorUpdateOneRequiredWithoutPagamentoNestedInput
  }

  export type pagamentoUncheckedUpdateInput = {
    idPagamento?: IntFieldUpdateOperationsInput | number
    valorPagamento?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    statusPagamento?: StringFieldUpdateOperationsInput | string
    Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
    entrega?: entregaUncheckedUpdateManyWithoutPagamentoNestedInput
  }

  export type pagamentoCreateManyInput = {
    idPagamento: number
    valorPagamento: string
    formaPagamento: string
    statusPagamento: string
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
  }

  export type pagamentoUpdateManyMutationInput = {
    idPagamento?: IntFieldUpdateOperationsInput | number
    valorPagamento?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    statusPagamento?: StringFieldUpdateOperationsInput | string
  }

  export type pagamentoUncheckedUpdateManyInput = {
    idPagamento?: IntFieldUpdateOperationsInput | number
    valorPagamento?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    statusPagamento?: StringFieldUpdateOperationsInput | string
    Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type produtoCreateInput = {
    idProduto?: number
    compensa_aoProduto: string
    descProduto?: string | null
    categoriaProduto?: string | null
    precoProduto: string
    quantidadeVendida?: number | null
    createdAt?: Date | string
    carrinho?: carrinhoCreateNestedManyWithoutProdutoInput
    vendedor: vendedorCreateNestedOneWithoutProdutoInput
  }

  export type produtoUncheckedCreateInput = {
    idProduto?: number
    compensa_aoProduto: string
    descProduto?: string | null
    categoriaProduto?: string | null
    precoProduto: string
    Vendedor_idVendedor: number
    quantidadeVendida?: number | null
    createdAt?: Date | string
    carrinho?: carrinhoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type produtoUpdateInput = {
    compensa_aoProduto?: StringFieldUpdateOperationsInput | string
    descProduto?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaProduto?: NullableStringFieldUpdateOperationsInput | string | null
    precoProduto?: StringFieldUpdateOperationsInput | string
    quantidadeVendida?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carrinho?: carrinhoUpdateManyWithoutProdutoNestedInput
    vendedor?: vendedorUpdateOneRequiredWithoutProdutoNestedInput
  }

  export type produtoUncheckedUpdateInput = {
    idProduto?: IntFieldUpdateOperationsInput | number
    compensa_aoProduto?: StringFieldUpdateOperationsInput | string
    descProduto?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaProduto?: NullableStringFieldUpdateOperationsInput | string | null
    precoProduto?: StringFieldUpdateOperationsInput | string
    Vendedor_idVendedor?: IntFieldUpdateOperationsInput | number
    quantidadeVendida?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carrinho?: carrinhoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type produtoCreateManyInput = {
    idProduto?: number
    compensa_aoProduto: string
    descProduto?: string | null
    categoriaProduto?: string | null
    precoProduto: string
    Vendedor_idVendedor: number
    quantidadeVendida?: number | null
    createdAt?: Date | string
  }

  export type produtoUpdateManyMutationInput = {
    compensa_aoProduto?: StringFieldUpdateOperationsInput | string
    descProduto?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaProduto?: NullableStringFieldUpdateOperationsInput | string | null
    precoProduto?: StringFieldUpdateOperationsInput | string
    quantidadeVendida?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type produtoUncheckedUpdateManyInput = {
    idProduto?: IntFieldUpdateOperationsInput | number
    compensa_aoProduto?: StringFieldUpdateOperationsInput | string
    descProduto?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaProduto?: NullableStringFieldUpdateOperationsInput | string | null
    precoProduto?: StringFieldUpdateOperationsInput | string
    Vendedor_idVendedor?: IntFieldUpdateOperationsInput | number
    quantidadeVendida?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usuarioCreateInput = {
    nomeUsuario: string
    emailUsuario: string
    cpfUsuario: string
    comprador?: compradorCreateNestedManyWithoutUsuarioInput
    vendedor?: vendedorCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateInput = {
    idUsuario?: number
    nomeUsuario: string
    emailUsuario: string
    cpfUsuario: string
    comprador?: compradorUncheckedCreateNestedManyWithoutUsuarioInput
    vendedor?: vendedorUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUpdateInput = {
    nomeUsuario?: StringFieldUpdateOperationsInput | string
    emailUsuario?: StringFieldUpdateOperationsInput | string
    cpfUsuario?: StringFieldUpdateOperationsInput | string
    comprador?: compradorUpdateManyWithoutUsuarioNestedInput
    vendedor?: vendedorUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    nomeUsuario?: StringFieldUpdateOperationsInput | string
    emailUsuario?: StringFieldUpdateOperationsInput | string
    cpfUsuario?: StringFieldUpdateOperationsInput | string
    comprador?: compradorUncheckedUpdateManyWithoutUsuarioNestedInput
    vendedor?: vendedorUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioCreateManyInput = {
    idUsuario?: number
    nomeUsuario: string
    emailUsuario: string
    cpfUsuario: string
  }

  export type usuarioUpdateManyMutationInput = {
    nomeUsuario?: StringFieldUpdateOperationsInput | string
    emailUsuario?: StringFieldUpdateOperationsInput | string
    cpfUsuario?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioUncheckedUpdateManyInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    nomeUsuario?: StringFieldUpdateOperationsInput | string
    emailUsuario?: StringFieldUpdateOperationsInput | string
    cpfUsuario?: StringFieldUpdateOperationsInput | string
  }

  export type vendedorCreateInput = {
    idVendedor: number
    razaosocialVendedor: string
    produto?: produtoCreateNestedManyWithoutVendedorInput
    usuario: usuarioCreateNestedOneWithoutVendedorInput
  }

  export type vendedorUncheckedCreateInput = {
    idVendedor: number
    razaosocialVendedor: string
    Usuario_idUsuario: number
    produto?: produtoUncheckedCreateNestedManyWithoutVendedorInput
  }

  export type vendedorUpdateInput = {
    idVendedor?: IntFieldUpdateOperationsInput | number
    razaosocialVendedor?: StringFieldUpdateOperationsInput | string
    produto?: produtoUpdateManyWithoutVendedorNestedInput
    usuario?: usuarioUpdateOneRequiredWithoutVendedorNestedInput
  }

  export type vendedorUncheckedUpdateInput = {
    idVendedor?: IntFieldUpdateOperationsInput | number
    razaosocialVendedor?: StringFieldUpdateOperationsInput | string
    Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
    produto?: produtoUncheckedUpdateManyWithoutVendedorNestedInput
  }

  export type vendedorCreateManyInput = {
    idVendedor: number
    razaosocialVendedor: string
    Usuario_idUsuario: number
  }

  export type vendedorUpdateManyMutationInput = {
    idVendedor?: IntFieldUpdateOperationsInput | number
    razaosocialVendedor?: StringFieldUpdateOperationsInput | string
  }

  export type vendedorUncheckedUpdateManyInput = {
    idVendedor?: IntFieldUpdateOperationsInput | number
    razaosocialVendedor?: StringFieldUpdateOperationsInput | string
    Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type avalia__oCountOrderByAggregateInput = {
    idAvalia__o?: SortOrder
    notaAvaliacao?: SortOrder
    comentarioAvaliacao?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
    Produto_idProduto?: SortOrder
    Produto_Vendedor_idVendedor?: SortOrder
    Produto_Comprador_idComprador?: SortOrder
    Produto_Comprador_Usuario_idUsuario?: SortOrder
  }

  export type avalia__oAvgOrderByAggregateInput = {
    idAvalia__o?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
    Produto_idProduto?: SortOrder
    Produto_Vendedor_idVendedor?: SortOrder
    Produto_Comprador_idComprador?: SortOrder
    Produto_Comprador_Usuario_idUsuario?: SortOrder
  }

  export type avalia__oMaxOrderByAggregateInput = {
    idAvalia__o?: SortOrder
    notaAvaliacao?: SortOrder
    comentarioAvaliacao?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
    Produto_idProduto?: SortOrder
    Produto_Vendedor_idVendedor?: SortOrder
    Produto_Comprador_idComprador?: SortOrder
    Produto_Comprador_Usuario_idUsuario?: SortOrder
  }

  export type avalia__oMinOrderByAggregateInput = {
    idAvalia__o?: SortOrder
    notaAvaliacao?: SortOrder
    comentarioAvaliacao?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
    Produto_idProduto?: SortOrder
    Produto_Vendedor_idVendedor?: SortOrder
    Produto_Comprador_idComprador?: SortOrder
    Produto_Comprador_Usuario_idUsuario?: SortOrder
  }

  export type avalia__oSumOrderByAggregateInput = {
    idAvalia__o?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
    Produto_idProduto?: SortOrder
    Produto_Vendedor_idVendedor?: SortOrder
    Produto_Comprador_idComprador?: SortOrder
    Produto_Comprador_Usuario_idUsuario?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ProdutoRelationFilter = {
    is?: produtoWhereInput
    isNot?: produtoWhereInput
  }

  export type carrinhoIdcarrinhoIdUsuarioIdProdutoCompoundUniqueInput = {
    idcarrinho: number
    idUsuario: number
    idProduto: number
  }

  export type carrinhoCountOrderByAggregateInput = {
    idcarrinho?: SortOrder
    idUsuario?: SortOrder
    idProduto?: SortOrder
    quantidade?: SortOrder
  }

  export type carrinhoAvgOrderByAggregateInput = {
    idcarrinho?: SortOrder
    idUsuario?: SortOrder
    idProduto?: SortOrder
    quantidade?: SortOrder
  }

  export type carrinhoMaxOrderByAggregateInput = {
    idcarrinho?: SortOrder
    idUsuario?: SortOrder
    idProduto?: SortOrder
    quantidade?: SortOrder
  }

  export type carrinhoMinOrderByAggregateInput = {
    idcarrinho?: SortOrder
    idUsuario?: SortOrder
    idProduto?: SortOrder
    quantidade?: SortOrder
  }

  export type carrinhoSumOrderByAggregateInput = {
    idcarrinho?: SortOrder
    idUsuario?: SortOrder
    idProduto?: SortOrder
    quantidade?: SortOrder
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UsuarioRelationFilter = {
    is?: usuarioWhereInput
    isNot?: usuarioWhereInput
  }

  export type PagamentoListRelationFilter = {
    every?: pagamentoWhereInput
    some?: pagamentoWhereInput
    none?: pagamentoWhereInput
  }

  export type pagamentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type compradorIdCompradorUsuario_idUsuarioCompoundUniqueInput = {
    idComprador: number
    Usuario_idUsuario: number
  }

  export type compradorCountOrderByAggregateInput = {
    idComprador?: SortOrder
    cpfcnpjComprador?: SortOrder
    nomeComprador?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type compradorAvgOrderByAggregateInput = {
    idComprador?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type compradorMaxOrderByAggregateInput = {
    idComprador?: SortOrder
    cpfcnpjComprador?: SortOrder
    nomeComprador?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type compradorMinOrderByAggregateInput = {
    idComprador?: SortOrder
    cpfcnpjComprador?: SortOrder
    nomeComprador?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type compradorSumOrderByAggregateInput = {
    idComprador?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type PagamentoRelationFilter = {
    is?: pagamentoWhereInput
    isNot?: pagamentoWhereInput
  }

  export type entregaIdEntregaPagamento_idPagamentoCompoundUniqueInput = {
    idEntrega: number
    Pagamento_idPagamento: number
  }

  export type entregaCountOrderByAggregateInput = {
    idEntrega?: SortOrder
    prazoEntrega?: SortOrder
    statusEntrega?: SortOrder
    Pagamento_idPagamento?: SortOrder
  }

  export type entregaAvgOrderByAggregateInput = {
    idEntrega?: SortOrder
    Pagamento_idPagamento?: SortOrder
  }

  export type entregaMaxOrderByAggregateInput = {
    idEntrega?: SortOrder
    prazoEntrega?: SortOrder
    statusEntrega?: SortOrder
    Pagamento_idPagamento?: SortOrder
  }

  export type entregaMinOrderByAggregateInput = {
    idEntrega?: SortOrder
    prazoEntrega?: SortOrder
    statusEntrega?: SortOrder
    Pagamento_idPagamento?: SortOrder
  }

  export type entregaSumOrderByAggregateInput = {
    idEntrega?: SortOrder
    Pagamento_idPagamento?: SortOrder
  }

  export type EntregaListRelationFilter = {
    every?: entregaWhereInput
    some?: entregaWhereInput
    none?: entregaWhereInput
  }

  export type CompradorRelationFilter = {
    is?: compradorWhereInput
    isNot?: compradorWhereInput
  }

  export type entregaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type pagamentoCountOrderByAggregateInput = {
    idPagamento?: SortOrder
    valorPagamento?: SortOrder
    formaPagamento?: SortOrder
    statusPagamento?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
  }

  export type pagamentoAvgOrderByAggregateInput = {
    idPagamento?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
  }

  export type pagamentoMaxOrderByAggregateInput = {
    idPagamento?: SortOrder
    valorPagamento?: SortOrder
    formaPagamento?: SortOrder
    statusPagamento?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
  }

  export type pagamentoMinOrderByAggregateInput = {
    idPagamento?: SortOrder
    valorPagamento?: SortOrder
    formaPagamento?: SortOrder
    statusPagamento?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
  }

  export type pagamentoSumOrderByAggregateInput = {
    idPagamento?: SortOrder
    Comprador_idComprador?: SortOrder
    Comprador_Usuario_idUsuario?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CarrinhoListRelationFilter = {
    every?: carrinhoWhereInput
    some?: carrinhoWhereInput
    none?: carrinhoWhereInput
  }

  export type VendedorRelationFilter = {
    is?: vendedorWhereInput
    isNot?: vendedorWhereInput
  }

  export type carrinhoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type produtoIdProdutoVendedor_idVendedorCompoundUniqueInput = {
    idProduto: number
    Vendedor_idVendedor: number
  }

  export type produtoCountOrderByAggregateInput = {
    idProduto?: SortOrder
    compensa_aoProduto?: SortOrder
    descProduto?: SortOrder
    categoriaProduto?: SortOrder
    precoProduto?: SortOrder
    Vendedor_idVendedor?: SortOrder
    quantidadeVendida?: SortOrder
    createdAt?: SortOrder
  }

  export type produtoAvgOrderByAggregateInput = {
    idProduto?: SortOrder
    Vendedor_idVendedor?: SortOrder
    quantidadeVendida?: SortOrder
  }

  export type produtoMaxOrderByAggregateInput = {
    idProduto?: SortOrder
    compensa_aoProduto?: SortOrder
    descProduto?: SortOrder
    categoriaProduto?: SortOrder
    precoProduto?: SortOrder
    Vendedor_idVendedor?: SortOrder
    quantidadeVendida?: SortOrder
    createdAt?: SortOrder
  }

  export type produtoMinOrderByAggregateInput = {
    idProduto?: SortOrder
    compensa_aoProduto?: SortOrder
    descProduto?: SortOrder
    categoriaProduto?: SortOrder
    precoProduto?: SortOrder
    Vendedor_idVendedor?: SortOrder
    quantidadeVendida?: SortOrder
    createdAt?: SortOrder
  }

  export type produtoSumOrderByAggregateInput = {
    idProduto?: SortOrder
    Vendedor_idVendedor?: SortOrder
    quantidadeVendida?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type CompradorListRelationFilter = {
    every?: compradorWhereInput
    some?: compradorWhereInput
    none?: compradorWhereInput
  }

  export type VendedorListRelationFilter = {
    every?: vendedorWhereInput
    some?: vendedorWhereInput
    none?: vendedorWhereInput
  }

  export type compradorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type vendedorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    idUsuario?: SortOrder
    nomeUsuario?: SortOrder
    emailUsuario?: SortOrder
    cpfUsuario?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    idUsuario?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    idUsuario?: SortOrder
    nomeUsuario?: SortOrder
    emailUsuario?: SortOrder
    cpfUsuario?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    idUsuario?: SortOrder
    nomeUsuario?: SortOrder
    emailUsuario?: SortOrder
    cpfUsuario?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    idUsuario?: SortOrder
  }

  export type ProdutoListRelationFilter = {
    every?: produtoWhereInput
    some?: produtoWhereInput
    none?: produtoWhereInput
  }

  export type produtoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type vendedorCountOrderByAggregateInput = {
    idVendedor?: SortOrder
    razaosocialVendedor?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type vendedorAvgOrderByAggregateInput = {
    idVendedor?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type vendedorMaxOrderByAggregateInput = {
    idVendedor?: SortOrder
    razaosocialVendedor?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type vendedorMinOrderByAggregateInput = {
    idVendedor?: SortOrder
    razaosocialVendedor?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type vendedorSumOrderByAggregateInput = {
    idVendedor?: SortOrder
    Usuario_idUsuario?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type produtoCreateNestedOneWithoutCarrinhoInput = {
    create?: XOR<produtoCreateWithoutCarrinhoInput, produtoUncheckedCreateWithoutCarrinhoInput>
    connectOrCreate?: produtoCreateOrConnectWithoutCarrinhoInput
    connect?: produtoWhereUniqueInput
  }

  export type produtoUpdateOneRequiredWithoutCarrinhoNestedInput = {
    create?: XOR<produtoCreateWithoutCarrinhoInput, produtoUncheckedCreateWithoutCarrinhoInput>
    connectOrCreate?: produtoCreateOrConnectWithoutCarrinhoInput
    upsert?: produtoUpsertWithoutCarrinhoInput
    connect?: produtoWhereUniqueInput
    update?: XOR<produtoUpdateWithoutCarrinhoInput, produtoUncheckedUpdateWithoutCarrinhoInput>
  }

  export type usuarioCreateNestedOneWithoutCompradorInput = {
    create?: XOR<usuarioCreateWithoutCompradorInput, usuarioUncheckedCreateWithoutCompradorInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutCompradorInput
    connect?: usuarioWhereUniqueInput
  }

  export type pagamentoCreateNestedManyWithoutCompradorInput = {
    create?: XOR<Enumerable<pagamentoCreateWithoutCompradorInput>, Enumerable<pagamentoUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<pagamentoCreateOrConnectWithoutCompradorInput>
    createMany?: pagamentoCreateManyCompradorInputEnvelope
    connect?: Enumerable<pagamentoWhereUniqueInput>
  }

  export type pagamentoUncheckedCreateNestedManyWithoutCompradorInput = {
    create?: XOR<Enumerable<pagamentoCreateWithoutCompradorInput>, Enumerable<pagamentoUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<pagamentoCreateOrConnectWithoutCompradorInput>
    createMany?: pagamentoCreateManyCompradorInputEnvelope
    connect?: Enumerable<pagamentoWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type usuarioUpdateOneRequiredWithoutCompradorNestedInput = {
    create?: XOR<usuarioCreateWithoutCompradorInput, usuarioUncheckedCreateWithoutCompradorInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutCompradorInput
    upsert?: usuarioUpsertWithoutCompradorInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<usuarioUpdateWithoutCompradorInput, usuarioUncheckedUpdateWithoutCompradorInput>
  }

  export type pagamentoUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<Enumerable<pagamentoCreateWithoutCompradorInput>, Enumerable<pagamentoUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<pagamentoCreateOrConnectWithoutCompradorInput>
    upsert?: Enumerable<pagamentoUpsertWithWhereUniqueWithoutCompradorInput>
    createMany?: pagamentoCreateManyCompradorInputEnvelope
    set?: Enumerable<pagamentoWhereUniqueInput>
    disconnect?: Enumerable<pagamentoWhereUniqueInput>
    delete?: Enumerable<pagamentoWhereUniqueInput>
    connect?: Enumerable<pagamentoWhereUniqueInput>
    update?: Enumerable<pagamentoUpdateWithWhereUniqueWithoutCompradorInput>
    updateMany?: Enumerable<pagamentoUpdateManyWithWhereWithoutCompradorInput>
    deleteMany?: Enumerable<pagamentoScalarWhereInput>
  }

  export type pagamentoUncheckedUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<Enumerable<pagamentoCreateWithoutCompradorInput>, Enumerable<pagamentoUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<pagamentoCreateOrConnectWithoutCompradorInput>
    upsert?: Enumerable<pagamentoUpsertWithWhereUniqueWithoutCompradorInput>
    createMany?: pagamentoCreateManyCompradorInputEnvelope
    set?: Enumerable<pagamentoWhereUniqueInput>
    disconnect?: Enumerable<pagamentoWhereUniqueInput>
    delete?: Enumerable<pagamentoWhereUniqueInput>
    connect?: Enumerable<pagamentoWhereUniqueInput>
    update?: Enumerable<pagamentoUpdateWithWhereUniqueWithoutCompradorInput>
    updateMany?: Enumerable<pagamentoUpdateManyWithWhereWithoutCompradorInput>
    deleteMany?: Enumerable<pagamentoScalarWhereInput>
  }

  export type pagamentoCreateNestedOneWithoutEntregaInput = {
    create?: XOR<pagamentoCreateWithoutEntregaInput, pagamentoUncheckedCreateWithoutEntregaInput>
    connectOrCreate?: pagamentoCreateOrConnectWithoutEntregaInput
    connect?: pagamentoWhereUniqueInput
  }

  export type pagamentoUpdateOneRequiredWithoutEntregaNestedInput = {
    create?: XOR<pagamentoCreateWithoutEntregaInput, pagamentoUncheckedCreateWithoutEntregaInput>
    connectOrCreate?: pagamentoCreateOrConnectWithoutEntregaInput
    upsert?: pagamentoUpsertWithoutEntregaInput
    connect?: pagamentoWhereUniqueInput
    update?: XOR<pagamentoUpdateWithoutEntregaInput, pagamentoUncheckedUpdateWithoutEntregaInput>
  }

  export type entregaCreateNestedManyWithoutPagamentoInput = {
    create?: XOR<Enumerable<entregaCreateWithoutPagamentoInput>, Enumerable<entregaUncheckedCreateWithoutPagamentoInput>>
    connectOrCreate?: Enumerable<entregaCreateOrConnectWithoutPagamentoInput>
    createMany?: entregaCreateManyPagamentoInputEnvelope
    connect?: Enumerable<entregaWhereUniqueInput>
  }

  export type compradorCreateNestedOneWithoutPagamentoInput = {
    create?: XOR<compradorCreateWithoutPagamentoInput, compradorUncheckedCreateWithoutPagamentoInput>
    connectOrCreate?: compradorCreateOrConnectWithoutPagamentoInput
    connect?: compradorWhereUniqueInput
  }

  export type entregaUncheckedCreateNestedManyWithoutPagamentoInput = {
    create?: XOR<Enumerable<entregaCreateWithoutPagamentoInput>, Enumerable<entregaUncheckedCreateWithoutPagamentoInput>>
    connectOrCreate?: Enumerable<entregaCreateOrConnectWithoutPagamentoInput>
    createMany?: entregaCreateManyPagamentoInputEnvelope
    connect?: Enumerable<entregaWhereUniqueInput>
  }

  export type entregaUpdateManyWithoutPagamentoNestedInput = {
    create?: XOR<Enumerable<entregaCreateWithoutPagamentoInput>, Enumerable<entregaUncheckedCreateWithoutPagamentoInput>>
    connectOrCreate?: Enumerable<entregaCreateOrConnectWithoutPagamentoInput>
    upsert?: Enumerable<entregaUpsertWithWhereUniqueWithoutPagamentoInput>
    createMany?: entregaCreateManyPagamentoInputEnvelope
    set?: Enumerable<entregaWhereUniqueInput>
    disconnect?: Enumerable<entregaWhereUniqueInput>
    delete?: Enumerable<entregaWhereUniqueInput>
    connect?: Enumerable<entregaWhereUniqueInput>
    update?: Enumerable<entregaUpdateWithWhereUniqueWithoutPagamentoInput>
    updateMany?: Enumerable<entregaUpdateManyWithWhereWithoutPagamentoInput>
    deleteMany?: Enumerable<entregaScalarWhereInput>
  }

  export type compradorUpdateOneRequiredWithoutPagamentoNestedInput = {
    create?: XOR<compradorCreateWithoutPagamentoInput, compradorUncheckedCreateWithoutPagamentoInput>
    connectOrCreate?: compradorCreateOrConnectWithoutPagamentoInput
    upsert?: compradorUpsertWithoutPagamentoInput
    connect?: compradorWhereUniqueInput
    update?: XOR<compradorUpdateWithoutPagamentoInput, compradorUncheckedUpdateWithoutPagamentoInput>
  }

  export type entregaUncheckedUpdateManyWithoutPagamentoNestedInput = {
    create?: XOR<Enumerable<entregaCreateWithoutPagamentoInput>, Enumerable<entregaUncheckedCreateWithoutPagamentoInput>>
    connectOrCreate?: Enumerable<entregaCreateOrConnectWithoutPagamentoInput>
    upsert?: Enumerable<entregaUpsertWithWhereUniqueWithoutPagamentoInput>
    createMany?: entregaCreateManyPagamentoInputEnvelope
    set?: Enumerable<entregaWhereUniqueInput>
    disconnect?: Enumerable<entregaWhereUniqueInput>
    delete?: Enumerable<entregaWhereUniqueInput>
    connect?: Enumerable<entregaWhereUniqueInput>
    update?: Enumerable<entregaUpdateWithWhereUniqueWithoutPagamentoInput>
    updateMany?: Enumerable<entregaUpdateManyWithWhereWithoutPagamentoInput>
    deleteMany?: Enumerable<entregaScalarWhereInput>
  }

  export type carrinhoCreateNestedManyWithoutProdutoInput = {
    create?: XOR<Enumerable<carrinhoCreateWithoutProdutoInput>, Enumerable<carrinhoUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<carrinhoCreateOrConnectWithoutProdutoInput>
    createMany?: carrinhoCreateManyProdutoInputEnvelope
    connect?: Enumerable<carrinhoWhereUniqueInput>
  }

  export type vendedorCreateNestedOneWithoutProdutoInput = {
    create?: XOR<vendedorCreateWithoutProdutoInput, vendedorUncheckedCreateWithoutProdutoInput>
    connectOrCreate?: vendedorCreateOrConnectWithoutProdutoInput
    connect?: vendedorWhereUniqueInput
  }

  export type carrinhoUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<Enumerable<carrinhoCreateWithoutProdutoInput>, Enumerable<carrinhoUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<carrinhoCreateOrConnectWithoutProdutoInput>
    createMany?: carrinhoCreateManyProdutoInputEnvelope
    connect?: Enumerable<carrinhoWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type carrinhoUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<Enumerable<carrinhoCreateWithoutProdutoInput>, Enumerable<carrinhoUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<carrinhoCreateOrConnectWithoutProdutoInput>
    upsert?: Enumerable<carrinhoUpsertWithWhereUniqueWithoutProdutoInput>
    createMany?: carrinhoCreateManyProdutoInputEnvelope
    set?: Enumerable<carrinhoWhereUniqueInput>
    disconnect?: Enumerable<carrinhoWhereUniqueInput>
    delete?: Enumerable<carrinhoWhereUniqueInput>
    connect?: Enumerable<carrinhoWhereUniqueInput>
    update?: Enumerable<carrinhoUpdateWithWhereUniqueWithoutProdutoInput>
    updateMany?: Enumerable<carrinhoUpdateManyWithWhereWithoutProdutoInput>
    deleteMany?: Enumerable<carrinhoScalarWhereInput>
  }

  export type vendedorUpdateOneRequiredWithoutProdutoNestedInput = {
    create?: XOR<vendedorCreateWithoutProdutoInput, vendedorUncheckedCreateWithoutProdutoInput>
    connectOrCreate?: vendedorCreateOrConnectWithoutProdutoInput
    upsert?: vendedorUpsertWithoutProdutoInput
    connect?: vendedorWhereUniqueInput
    update?: XOR<vendedorUpdateWithoutProdutoInput, vendedorUncheckedUpdateWithoutProdutoInput>
  }

  export type carrinhoUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<Enumerable<carrinhoCreateWithoutProdutoInput>, Enumerable<carrinhoUncheckedCreateWithoutProdutoInput>>
    connectOrCreate?: Enumerable<carrinhoCreateOrConnectWithoutProdutoInput>
    upsert?: Enumerable<carrinhoUpsertWithWhereUniqueWithoutProdutoInput>
    createMany?: carrinhoCreateManyProdutoInputEnvelope
    set?: Enumerable<carrinhoWhereUniqueInput>
    disconnect?: Enumerable<carrinhoWhereUniqueInput>
    delete?: Enumerable<carrinhoWhereUniqueInput>
    connect?: Enumerable<carrinhoWhereUniqueInput>
    update?: Enumerable<carrinhoUpdateWithWhereUniqueWithoutProdutoInput>
    updateMany?: Enumerable<carrinhoUpdateManyWithWhereWithoutProdutoInput>
    deleteMany?: Enumerable<carrinhoScalarWhereInput>
  }

  export type compradorCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<compradorCreateWithoutUsuarioInput>, Enumerable<compradorUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<compradorCreateOrConnectWithoutUsuarioInput>
    createMany?: compradorCreateManyUsuarioInputEnvelope
    connect?: Enumerable<compradorWhereUniqueInput>
  }

  export type vendedorCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<vendedorCreateWithoutUsuarioInput>, Enumerable<vendedorUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<vendedorCreateOrConnectWithoutUsuarioInput>
    createMany?: vendedorCreateManyUsuarioInputEnvelope
    connect?: Enumerable<vendedorWhereUniqueInput>
  }

  export type compradorUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<compradorCreateWithoutUsuarioInput>, Enumerable<compradorUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<compradorCreateOrConnectWithoutUsuarioInput>
    createMany?: compradorCreateManyUsuarioInputEnvelope
    connect?: Enumerable<compradorWhereUniqueInput>
  }

  export type vendedorUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<vendedorCreateWithoutUsuarioInput>, Enumerable<vendedorUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<vendedorCreateOrConnectWithoutUsuarioInput>
    createMany?: vendedorCreateManyUsuarioInputEnvelope
    connect?: Enumerable<vendedorWhereUniqueInput>
  }

  export type compradorUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<compradorCreateWithoutUsuarioInput>, Enumerable<compradorUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<compradorCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<compradorUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: compradorCreateManyUsuarioInputEnvelope
    set?: Enumerable<compradorWhereUniqueInput>
    disconnect?: Enumerable<compradorWhereUniqueInput>
    delete?: Enumerable<compradorWhereUniqueInput>
    connect?: Enumerable<compradorWhereUniqueInput>
    update?: Enumerable<compradorUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<compradorUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<compradorScalarWhereInput>
  }

  export type vendedorUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<vendedorCreateWithoutUsuarioInput>, Enumerable<vendedorUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<vendedorCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<vendedorUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: vendedorCreateManyUsuarioInputEnvelope
    set?: Enumerable<vendedorWhereUniqueInput>
    disconnect?: Enumerable<vendedorWhereUniqueInput>
    delete?: Enumerable<vendedorWhereUniqueInput>
    connect?: Enumerable<vendedorWhereUniqueInput>
    update?: Enumerable<vendedorUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<vendedorUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<vendedorScalarWhereInput>
  }

  export type compradorUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<compradorCreateWithoutUsuarioInput>, Enumerable<compradorUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<compradorCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<compradorUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: compradorCreateManyUsuarioInputEnvelope
    set?: Enumerable<compradorWhereUniqueInput>
    disconnect?: Enumerable<compradorWhereUniqueInput>
    delete?: Enumerable<compradorWhereUniqueInput>
    connect?: Enumerable<compradorWhereUniqueInput>
    update?: Enumerable<compradorUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<compradorUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<compradorScalarWhereInput>
  }

  export type vendedorUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<vendedorCreateWithoutUsuarioInput>, Enumerable<vendedorUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<vendedorCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<vendedorUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: vendedorCreateManyUsuarioInputEnvelope
    set?: Enumerable<vendedorWhereUniqueInput>
    disconnect?: Enumerable<vendedorWhereUniqueInput>
    delete?: Enumerable<vendedorWhereUniqueInput>
    connect?: Enumerable<vendedorWhereUniqueInput>
    update?: Enumerable<vendedorUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<vendedorUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<vendedorScalarWhereInput>
  }

  export type produtoCreateNestedManyWithoutVendedorInput = {
    create?: XOR<Enumerable<produtoCreateWithoutVendedorInput>, Enumerable<produtoUncheckedCreateWithoutVendedorInput>>
    connectOrCreate?: Enumerable<produtoCreateOrConnectWithoutVendedorInput>
    createMany?: produtoCreateManyVendedorInputEnvelope
    connect?: Enumerable<produtoWhereUniqueInput>
  }

  export type usuarioCreateNestedOneWithoutVendedorInput = {
    create?: XOR<usuarioCreateWithoutVendedorInput, usuarioUncheckedCreateWithoutVendedorInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutVendedorInput
    connect?: usuarioWhereUniqueInput
  }

  export type produtoUncheckedCreateNestedManyWithoutVendedorInput = {
    create?: XOR<Enumerable<produtoCreateWithoutVendedorInput>, Enumerable<produtoUncheckedCreateWithoutVendedorInput>>
    connectOrCreate?: Enumerable<produtoCreateOrConnectWithoutVendedorInput>
    createMany?: produtoCreateManyVendedorInputEnvelope
    connect?: Enumerable<produtoWhereUniqueInput>
  }

  export type produtoUpdateManyWithoutVendedorNestedInput = {
    create?: XOR<Enumerable<produtoCreateWithoutVendedorInput>, Enumerable<produtoUncheckedCreateWithoutVendedorInput>>
    connectOrCreate?: Enumerable<produtoCreateOrConnectWithoutVendedorInput>
    upsert?: Enumerable<produtoUpsertWithWhereUniqueWithoutVendedorInput>
    createMany?: produtoCreateManyVendedorInputEnvelope
    set?: Enumerable<produtoWhereUniqueInput>
    disconnect?: Enumerable<produtoWhereUniqueInput>
    delete?: Enumerable<produtoWhereUniqueInput>
    connect?: Enumerable<produtoWhereUniqueInput>
    update?: Enumerable<produtoUpdateWithWhereUniqueWithoutVendedorInput>
    updateMany?: Enumerable<produtoUpdateManyWithWhereWithoutVendedorInput>
    deleteMany?: Enumerable<produtoScalarWhereInput>
  }

  export type usuarioUpdateOneRequiredWithoutVendedorNestedInput = {
    create?: XOR<usuarioCreateWithoutVendedorInput, usuarioUncheckedCreateWithoutVendedorInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutVendedorInput
    upsert?: usuarioUpsertWithoutVendedorInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<usuarioUpdateWithoutVendedorInput, usuarioUncheckedUpdateWithoutVendedorInput>
  }

  export type produtoUncheckedUpdateManyWithoutVendedorNestedInput = {
    create?: XOR<Enumerable<produtoCreateWithoutVendedorInput>, Enumerable<produtoUncheckedCreateWithoutVendedorInput>>
    connectOrCreate?: Enumerable<produtoCreateOrConnectWithoutVendedorInput>
    upsert?: Enumerable<produtoUpsertWithWhereUniqueWithoutVendedorInput>
    createMany?: produtoCreateManyVendedorInputEnvelope
    set?: Enumerable<produtoWhereUniqueInput>
    disconnect?: Enumerable<produtoWhereUniqueInput>
    delete?: Enumerable<produtoWhereUniqueInput>
    connect?: Enumerable<produtoWhereUniqueInput>
    update?: Enumerable<produtoUpdateWithWhereUniqueWithoutVendedorInput>
    updateMany?: Enumerable<produtoUpdateManyWithWhereWithoutVendedorInput>
    deleteMany?: Enumerable<produtoScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type produtoCreateWithoutCarrinhoInput = {
    idProduto?: number
    compensa_aoProduto: string
    descProduto?: string | null
    categoriaProduto?: string | null
    precoProduto: string
    quantidadeVendida?: number | null
    createdAt?: Date | string
    vendedor: vendedorCreateNestedOneWithoutProdutoInput
  }

  export type produtoUncheckedCreateWithoutCarrinhoInput = {
    idProduto?: number
    compensa_aoProduto: string
    descProduto?: string | null
    categoriaProduto?: string | null
    precoProduto: string
    Vendedor_idVendedor: number
    quantidadeVendida?: number | null
    createdAt?: Date | string
  }

  export type produtoCreateOrConnectWithoutCarrinhoInput = {
    where: produtoWhereUniqueInput
    create: XOR<produtoCreateWithoutCarrinhoInput, produtoUncheckedCreateWithoutCarrinhoInput>
  }

  export type produtoUpsertWithoutCarrinhoInput = {
    update: XOR<produtoUpdateWithoutCarrinhoInput, produtoUncheckedUpdateWithoutCarrinhoInput>
    create: XOR<produtoCreateWithoutCarrinhoInput, produtoUncheckedCreateWithoutCarrinhoInput>
  }

  export type produtoUpdateWithoutCarrinhoInput = {
    compensa_aoProduto?: StringFieldUpdateOperationsInput | string
    descProduto?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaProduto?: NullableStringFieldUpdateOperationsInput | string | null
    precoProduto?: StringFieldUpdateOperationsInput | string
    quantidadeVendida?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendedor?: vendedorUpdateOneRequiredWithoutProdutoNestedInput
  }

  export type produtoUncheckedUpdateWithoutCarrinhoInput = {
    idProduto?: IntFieldUpdateOperationsInput | number
    compensa_aoProduto?: StringFieldUpdateOperationsInput | string
    descProduto?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaProduto?: NullableStringFieldUpdateOperationsInput | string | null
    precoProduto?: StringFieldUpdateOperationsInput | string
    Vendedor_idVendedor?: IntFieldUpdateOperationsInput | number
    quantidadeVendida?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usuarioCreateWithoutCompradorInput = {
    nomeUsuario: string
    emailUsuario: string
    cpfUsuario: string
    vendedor?: vendedorCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutCompradorInput = {
    idUsuario?: number
    nomeUsuario: string
    emailUsuario: string
    cpfUsuario: string
    vendedor?: vendedorUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutCompradorInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutCompradorInput, usuarioUncheckedCreateWithoutCompradorInput>
  }

  export type pagamentoCreateWithoutCompradorInput = {
    idPagamento: number
    valorPagamento: string
    formaPagamento: string
    statusPagamento: string
    entrega?: entregaCreateNestedManyWithoutPagamentoInput
  }

  export type pagamentoUncheckedCreateWithoutCompradorInput = {
    idPagamento: number
    valorPagamento: string
    formaPagamento: string
    statusPagamento: string
    entrega?: entregaUncheckedCreateNestedManyWithoutPagamentoInput
  }

  export type pagamentoCreateOrConnectWithoutCompradorInput = {
    where: pagamentoWhereUniqueInput
    create: XOR<pagamentoCreateWithoutCompradorInput, pagamentoUncheckedCreateWithoutCompradorInput>
  }

  export type pagamentoCreateManyCompradorInputEnvelope = {
    data: Enumerable<pagamentoCreateManyCompradorInput>
    skipDuplicates?: boolean
  }

  export type usuarioUpsertWithoutCompradorInput = {
    update: XOR<usuarioUpdateWithoutCompradorInput, usuarioUncheckedUpdateWithoutCompradorInput>
    create: XOR<usuarioCreateWithoutCompradorInput, usuarioUncheckedCreateWithoutCompradorInput>
  }

  export type usuarioUpdateWithoutCompradorInput = {
    nomeUsuario?: StringFieldUpdateOperationsInput | string
    emailUsuario?: StringFieldUpdateOperationsInput | string
    cpfUsuario?: StringFieldUpdateOperationsInput | string
    vendedor?: vendedorUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutCompradorInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    nomeUsuario?: StringFieldUpdateOperationsInput | string
    emailUsuario?: StringFieldUpdateOperationsInput | string
    cpfUsuario?: StringFieldUpdateOperationsInput | string
    vendedor?: vendedorUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type pagamentoUpsertWithWhereUniqueWithoutCompradorInput = {
    where: pagamentoWhereUniqueInput
    update: XOR<pagamentoUpdateWithoutCompradorInput, pagamentoUncheckedUpdateWithoutCompradorInput>
    create: XOR<pagamentoCreateWithoutCompradorInput, pagamentoUncheckedCreateWithoutCompradorInput>
  }

  export type pagamentoUpdateWithWhereUniqueWithoutCompradorInput = {
    where: pagamentoWhereUniqueInput
    data: XOR<pagamentoUpdateWithoutCompradorInput, pagamentoUncheckedUpdateWithoutCompradorInput>
  }

  export type pagamentoUpdateManyWithWhereWithoutCompradorInput = {
    where: pagamentoScalarWhereInput
    data: XOR<pagamentoUpdateManyMutationInput, pagamentoUncheckedUpdateManyWithoutPagamentoInput>
  }

  export type pagamentoScalarWhereInput = {
    AND?: Enumerable<pagamentoScalarWhereInput>
    OR?: Enumerable<pagamentoScalarWhereInput>
    NOT?: Enumerable<pagamentoScalarWhereInput>
    idPagamento?: IntFilter | number
    valorPagamento?: StringFilter | string
    formaPagamento?: StringFilter | string
    statusPagamento?: StringFilter | string
    Comprador_idComprador?: IntFilter | number
    Comprador_Usuario_idUsuario?: IntFilter | number
  }

  export type pagamentoCreateWithoutEntregaInput = {
    idPagamento: number
    valorPagamento: string
    formaPagamento: string
    statusPagamento: string
    comprador: compradorCreateNestedOneWithoutPagamentoInput
  }

  export type pagamentoUncheckedCreateWithoutEntregaInput = {
    idPagamento: number
    valorPagamento: string
    formaPagamento: string
    statusPagamento: string
    Comprador_idComprador: number
    Comprador_Usuario_idUsuario: number
  }

  export type pagamentoCreateOrConnectWithoutEntregaInput = {
    where: pagamentoWhereUniqueInput
    create: XOR<pagamentoCreateWithoutEntregaInput, pagamentoUncheckedCreateWithoutEntregaInput>
  }

  export type pagamentoUpsertWithoutEntregaInput = {
    update: XOR<pagamentoUpdateWithoutEntregaInput, pagamentoUncheckedUpdateWithoutEntregaInput>
    create: XOR<pagamentoCreateWithoutEntregaInput, pagamentoUncheckedCreateWithoutEntregaInput>
  }

  export type pagamentoUpdateWithoutEntregaInput = {
    idPagamento?: IntFieldUpdateOperationsInput | number
    valorPagamento?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    statusPagamento?: StringFieldUpdateOperationsInput | string
    comprador?: compradorUpdateOneRequiredWithoutPagamentoNestedInput
  }

  export type pagamentoUncheckedUpdateWithoutEntregaInput = {
    idPagamento?: IntFieldUpdateOperationsInput | number
    valorPagamento?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    statusPagamento?: StringFieldUpdateOperationsInput | string
    Comprador_idComprador?: IntFieldUpdateOperationsInput | number
    Comprador_Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type entregaCreateWithoutPagamentoInput = {
    idEntrega: number
    prazoEntrega?: string | null
    statusEntrega: string
  }

  export type entregaUncheckedCreateWithoutPagamentoInput = {
    idEntrega: number
    prazoEntrega?: string | null
    statusEntrega: string
  }

  export type entregaCreateOrConnectWithoutPagamentoInput = {
    where: entregaWhereUniqueInput
    create: XOR<entregaCreateWithoutPagamentoInput, entregaUncheckedCreateWithoutPagamentoInput>
  }

  export type entregaCreateManyPagamentoInputEnvelope = {
    data: Enumerable<entregaCreateManyPagamentoInput>
    skipDuplicates?: boolean
  }

  export type compradorCreateWithoutPagamentoInput = {
    idComprador: number
    cpfcnpjComprador: string
    nomeComprador: string
    usuario: usuarioCreateNestedOneWithoutCompradorInput
  }

  export type compradorUncheckedCreateWithoutPagamentoInput = {
    idComprador: number
    cpfcnpjComprador: string
    nomeComprador: string
    Usuario_idUsuario: number
  }

  export type compradorCreateOrConnectWithoutPagamentoInput = {
    where: compradorWhereUniqueInput
    create: XOR<compradorCreateWithoutPagamentoInput, compradorUncheckedCreateWithoutPagamentoInput>
  }

  export type entregaUpsertWithWhereUniqueWithoutPagamentoInput = {
    where: entregaWhereUniqueInput
    update: XOR<entregaUpdateWithoutPagamentoInput, entregaUncheckedUpdateWithoutPagamentoInput>
    create: XOR<entregaCreateWithoutPagamentoInput, entregaUncheckedCreateWithoutPagamentoInput>
  }

  export type entregaUpdateWithWhereUniqueWithoutPagamentoInput = {
    where: entregaWhereUniqueInput
    data: XOR<entregaUpdateWithoutPagamentoInput, entregaUncheckedUpdateWithoutPagamentoInput>
  }

  export type entregaUpdateManyWithWhereWithoutPagamentoInput = {
    where: entregaScalarWhereInput
    data: XOR<entregaUpdateManyMutationInput, entregaUncheckedUpdateManyWithoutEntregaInput>
  }

  export type entregaScalarWhereInput = {
    AND?: Enumerable<entregaScalarWhereInput>
    OR?: Enumerable<entregaScalarWhereInput>
    NOT?: Enumerable<entregaScalarWhereInput>
    idEntrega?: IntFilter | number
    prazoEntrega?: StringNullableFilter | string | null
    statusEntrega?: StringFilter | string
    Pagamento_idPagamento?: IntFilter | number
  }

  export type compradorUpsertWithoutPagamentoInput = {
    update: XOR<compradorUpdateWithoutPagamentoInput, compradorUncheckedUpdateWithoutPagamentoInput>
    create: XOR<compradorCreateWithoutPagamentoInput, compradorUncheckedCreateWithoutPagamentoInput>
  }

  export type compradorUpdateWithoutPagamentoInput = {
    idComprador?: IntFieldUpdateOperationsInput | number
    cpfcnpjComprador?: StringFieldUpdateOperationsInput | string
    nomeComprador?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutCompradorNestedInput
  }

  export type compradorUncheckedUpdateWithoutPagamentoInput = {
    idComprador?: IntFieldUpdateOperationsInput | number
    cpfcnpjComprador?: StringFieldUpdateOperationsInput | string
    nomeComprador?: StringFieldUpdateOperationsInput | string
    Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type carrinhoCreateWithoutProdutoInput = {
    idcarrinho?: number
    idUsuario: number
    quantidade: number
  }

  export type carrinhoUncheckedCreateWithoutProdutoInput = {
    idcarrinho?: number
    idUsuario: number
    quantidade: number
  }

  export type carrinhoCreateOrConnectWithoutProdutoInput = {
    where: carrinhoWhereUniqueInput
    create: XOR<carrinhoCreateWithoutProdutoInput, carrinhoUncheckedCreateWithoutProdutoInput>
  }

  export type carrinhoCreateManyProdutoInputEnvelope = {
    data: Enumerable<carrinhoCreateManyProdutoInput>
    skipDuplicates?: boolean
  }

  export type vendedorCreateWithoutProdutoInput = {
    idVendedor: number
    razaosocialVendedor: string
    usuario: usuarioCreateNestedOneWithoutVendedorInput
  }

  export type vendedorUncheckedCreateWithoutProdutoInput = {
    idVendedor: number
    razaosocialVendedor: string
    Usuario_idUsuario: number
  }

  export type vendedorCreateOrConnectWithoutProdutoInput = {
    where: vendedorWhereUniqueInput
    create: XOR<vendedorCreateWithoutProdutoInput, vendedorUncheckedCreateWithoutProdutoInput>
  }

  export type carrinhoUpsertWithWhereUniqueWithoutProdutoInput = {
    where: carrinhoWhereUniqueInput
    update: XOR<carrinhoUpdateWithoutProdutoInput, carrinhoUncheckedUpdateWithoutProdutoInput>
    create: XOR<carrinhoCreateWithoutProdutoInput, carrinhoUncheckedCreateWithoutProdutoInput>
  }

  export type carrinhoUpdateWithWhereUniqueWithoutProdutoInput = {
    where: carrinhoWhereUniqueInput
    data: XOR<carrinhoUpdateWithoutProdutoInput, carrinhoUncheckedUpdateWithoutProdutoInput>
  }

  export type carrinhoUpdateManyWithWhereWithoutProdutoInput = {
    where: carrinhoScalarWhereInput
    data: XOR<carrinhoUpdateManyMutationInput, carrinhoUncheckedUpdateManyWithoutCarrinhoInput>
  }

  export type carrinhoScalarWhereInput = {
    AND?: Enumerable<carrinhoScalarWhereInput>
    OR?: Enumerable<carrinhoScalarWhereInput>
    NOT?: Enumerable<carrinhoScalarWhereInput>
    idcarrinho?: IntFilter | number
    idUsuario?: IntFilter | number
    idProduto?: IntFilter | number
    quantidade?: IntFilter | number
  }

  export type vendedorUpsertWithoutProdutoInput = {
    update: XOR<vendedorUpdateWithoutProdutoInput, vendedorUncheckedUpdateWithoutProdutoInput>
    create: XOR<vendedorCreateWithoutProdutoInput, vendedorUncheckedCreateWithoutProdutoInput>
  }

  export type vendedorUpdateWithoutProdutoInput = {
    idVendedor?: IntFieldUpdateOperationsInput | number
    razaosocialVendedor?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutVendedorNestedInput
  }

  export type vendedorUncheckedUpdateWithoutProdutoInput = {
    idVendedor?: IntFieldUpdateOperationsInput | number
    razaosocialVendedor?: StringFieldUpdateOperationsInput | string
    Usuario_idUsuario?: IntFieldUpdateOperationsInput | number
  }

  export type compradorCreateWithoutUsuarioInput = {
    idComprador: number
    cpfcnpjComprador: string
    nomeComprador: string
    pagamento?: pagamentoCreateNestedManyWithoutCompradorInput
  }

  export type compradorUncheckedCreateWithoutUsuarioInput = {
    idComprador: number
    cpfcnpjComprador: string
    nomeComprador: string
    pagamento?: pagamentoUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type compradorCreateOrConnectWithoutUsuarioInput = {
    where: compradorWhereUniqueInput
    create: XOR<compradorCreateWithoutUsuarioInput, compradorUncheckedCreateWithoutUsuarioInput>
  }

  export type compradorCreateManyUsuarioInputEnvelope = {
    data: Enumerable<compradorCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type vendedorCreateWithoutUsuarioInput = {
    idVendedor: number
    razaosocialVendedor: string
    produto?: produtoCreateNestedManyWithoutVendedorInput
  }

  export type vendedorUncheckedCreateWithoutUsuarioInput = {
    idVendedor: number
    razaosocialVendedor: string
    produto?: produtoUncheckedCreateNestedManyWithoutVendedorInput
  }

  export type vendedorCreateOrConnectWithoutUsuarioInput = {
    where: vendedorWhereUniqueInput
    create: XOR<vendedorCreateWithoutUsuarioInput, vendedorUncheckedCreateWithoutUsuarioInput>
  }

  export type vendedorCreateManyUsuarioInputEnvelope = {
    data: Enumerable<vendedorCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type compradorUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: compradorWhereUniqueInput
    update: XOR<compradorUpdateWithoutUsuarioInput, compradorUncheckedUpdateWithoutUsuarioInput>
    create: XOR<compradorCreateWithoutUsuarioInput, compradorUncheckedCreateWithoutUsuarioInput>
  }

  export type compradorUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: compradorWhereUniqueInput
    data: XOR<compradorUpdateWithoutUsuarioInput, compradorUncheckedUpdateWithoutUsuarioInput>
  }

  export type compradorUpdateManyWithWhereWithoutUsuarioInput = {
    where: compradorScalarWhereInput
    data: XOR<compradorUpdateManyMutationInput, compradorUncheckedUpdateManyWithoutCompradorInput>
  }

  export type compradorScalarWhereInput = {
    AND?: Enumerable<compradorScalarWhereInput>
    OR?: Enumerable<compradorScalarWhereInput>
    NOT?: Enumerable<compradorScalarWhereInput>
    idComprador?: IntFilter | number
    cpfcnpjComprador?: StringFilter | string
    nomeComprador?: StringFilter | string
    Usuario_idUsuario?: IntFilter | number
  }

  export type vendedorUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: vendedorWhereUniqueInput
    update: XOR<vendedorUpdateWithoutUsuarioInput, vendedorUncheckedUpdateWithoutUsuarioInput>
    create: XOR<vendedorCreateWithoutUsuarioInput, vendedorUncheckedCreateWithoutUsuarioInput>
  }

  export type vendedorUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: vendedorWhereUniqueInput
    data: XOR<vendedorUpdateWithoutUsuarioInput, vendedorUncheckedUpdateWithoutUsuarioInput>
  }

  export type vendedorUpdateManyWithWhereWithoutUsuarioInput = {
    where: vendedorScalarWhereInput
    data: XOR<vendedorUpdateManyMutationInput, vendedorUncheckedUpdateManyWithoutVendedorInput>
  }

  export type vendedorScalarWhereInput = {
    AND?: Enumerable<vendedorScalarWhereInput>
    OR?: Enumerable<vendedorScalarWhereInput>
    NOT?: Enumerable<vendedorScalarWhereInput>
    idVendedor?: IntFilter | number
    razaosocialVendedor?: StringFilter | string
    Usuario_idUsuario?: IntFilter | number
  }

  export type produtoCreateWithoutVendedorInput = {
    idProduto?: number
    compensa_aoProduto: string
    descProduto?: string | null
    categoriaProduto?: string | null
    precoProduto: string
    quantidadeVendida?: number | null
    createdAt?: Date | string
    carrinho?: carrinhoCreateNestedManyWithoutProdutoInput
  }

  export type produtoUncheckedCreateWithoutVendedorInput = {
    idProduto?: number
    compensa_aoProduto: string
    descProduto?: string | null
    categoriaProduto?: string | null
    precoProduto: string
    quantidadeVendida?: number | null
    createdAt?: Date | string
    carrinho?: carrinhoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type produtoCreateOrConnectWithoutVendedorInput = {
    where: produtoWhereUniqueInput
    create: XOR<produtoCreateWithoutVendedorInput, produtoUncheckedCreateWithoutVendedorInput>
  }

  export type produtoCreateManyVendedorInputEnvelope = {
    data: Enumerable<produtoCreateManyVendedorInput>
    skipDuplicates?: boolean
  }

  export type usuarioCreateWithoutVendedorInput = {
    nomeUsuario: string
    emailUsuario: string
    cpfUsuario: string
    comprador?: compradorCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutVendedorInput = {
    idUsuario?: number
    nomeUsuario: string
    emailUsuario: string
    cpfUsuario: string
    comprador?: compradorUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutVendedorInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutVendedorInput, usuarioUncheckedCreateWithoutVendedorInput>
  }

  export type produtoUpsertWithWhereUniqueWithoutVendedorInput = {
    where: produtoWhereUniqueInput
    update: XOR<produtoUpdateWithoutVendedorInput, produtoUncheckedUpdateWithoutVendedorInput>
    create: XOR<produtoCreateWithoutVendedorInput, produtoUncheckedCreateWithoutVendedorInput>
  }

  export type produtoUpdateWithWhereUniqueWithoutVendedorInput = {
    where: produtoWhereUniqueInput
    data: XOR<produtoUpdateWithoutVendedorInput, produtoUncheckedUpdateWithoutVendedorInput>
  }

  export type produtoUpdateManyWithWhereWithoutVendedorInput = {
    where: produtoScalarWhereInput
    data: XOR<produtoUpdateManyMutationInput, produtoUncheckedUpdateManyWithoutProdutoInput>
  }

  export type produtoScalarWhereInput = {
    AND?: Enumerable<produtoScalarWhereInput>
    OR?: Enumerable<produtoScalarWhereInput>
    NOT?: Enumerable<produtoScalarWhereInput>
    idProduto?: IntFilter | number
    compensa_aoProduto?: StringFilter | string
    descProduto?: StringNullableFilter | string | null
    categoriaProduto?: StringNullableFilter | string | null
    precoProduto?: StringFilter | string
    Vendedor_idVendedor?: IntFilter | number
    quantidadeVendida?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type usuarioUpsertWithoutVendedorInput = {
    update: XOR<usuarioUpdateWithoutVendedorInput, usuarioUncheckedUpdateWithoutVendedorInput>
    create: XOR<usuarioCreateWithoutVendedorInput, usuarioUncheckedCreateWithoutVendedorInput>
  }

  export type usuarioUpdateWithoutVendedorInput = {
    nomeUsuario?: StringFieldUpdateOperationsInput | string
    emailUsuario?: StringFieldUpdateOperationsInput | string
    cpfUsuario?: StringFieldUpdateOperationsInput | string
    comprador?: compradorUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutVendedorInput = {
    idUsuario?: IntFieldUpdateOperationsInput | number
    nomeUsuario?: StringFieldUpdateOperationsInput | string
    emailUsuario?: StringFieldUpdateOperationsInput | string
    cpfUsuario?: StringFieldUpdateOperationsInput | string
    comprador?: compradorUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type pagamentoCreateManyCompradorInput = {
    idPagamento: number
    valorPagamento: string
    formaPagamento: string
    statusPagamento: string
  }

  export type pagamentoUpdateWithoutCompradorInput = {
    idPagamento?: IntFieldUpdateOperationsInput | number
    valorPagamento?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    statusPagamento?: StringFieldUpdateOperationsInput | string
    entrega?: entregaUpdateManyWithoutPagamentoNestedInput
  }

  export type pagamentoUncheckedUpdateWithoutCompradorInput = {
    idPagamento?: IntFieldUpdateOperationsInput | number
    valorPagamento?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    statusPagamento?: StringFieldUpdateOperationsInput | string
    entrega?: entregaUncheckedUpdateManyWithoutPagamentoNestedInput
  }

  export type pagamentoUncheckedUpdateManyWithoutPagamentoInput = {
    idPagamento?: IntFieldUpdateOperationsInput | number
    valorPagamento?: StringFieldUpdateOperationsInput | string
    formaPagamento?: StringFieldUpdateOperationsInput | string
    statusPagamento?: StringFieldUpdateOperationsInput | string
  }

  export type entregaCreateManyPagamentoInput = {
    idEntrega: number
    prazoEntrega?: string | null
    statusEntrega: string
  }

  export type entregaUpdateWithoutPagamentoInput = {
    idEntrega?: IntFieldUpdateOperationsInput | number
    prazoEntrega?: NullableStringFieldUpdateOperationsInput | string | null
    statusEntrega?: StringFieldUpdateOperationsInput | string
  }

  export type entregaUncheckedUpdateWithoutPagamentoInput = {
    idEntrega?: IntFieldUpdateOperationsInput | number
    prazoEntrega?: NullableStringFieldUpdateOperationsInput | string | null
    statusEntrega?: StringFieldUpdateOperationsInput | string
  }

  export type entregaUncheckedUpdateManyWithoutEntregaInput = {
    idEntrega?: IntFieldUpdateOperationsInput | number
    prazoEntrega?: NullableStringFieldUpdateOperationsInput | string | null
    statusEntrega?: StringFieldUpdateOperationsInput | string
  }

  export type carrinhoCreateManyProdutoInput = {
    idcarrinho?: number
    idUsuario: number
    quantidade: number
  }

  export type carrinhoUpdateWithoutProdutoInput = {
    idcarrinho?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type carrinhoUncheckedUpdateWithoutProdutoInput = {
    idcarrinho?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type carrinhoUncheckedUpdateManyWithoutCarrinhoInput = {
    idcarrinho?: IntFieldUpdateOperationsInput | number
    idUsuario?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type compradorCreateManyUsuarioInput = {
    idComprador: number
    cpfcnpjComprador: string
    nomeComprador: string
  }

  export type vendedorCreateManyUsuarioInput = {
    idVendedor: number
    razaosocialVendedor: string
  }

  export type compradorUpdateWithoutUsuarioInput = {
    idComprador?: IntFieldUpdateOperationsInput | number
    cpfcnpjComprador?: StringFieldUpdateOperationsInput | string
    nomeComprador?: StringFieldUpdateOperationsInput | string
    pagamento?: pagamentoUpdateManyWithoutCompradorNestedInput
  }

  export type compradorUncheckedUpdateWithoutUsuarioInput = {
    idComprador?: IntFieldUpdateOperationsInput | number
    cpfcnpjComprador?: StringFieldUpdateOperationsInput | string
    nomeComprador?: StringFieldUpdateOperationsInput | string
    pagamento?: pagamentoUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type compradorUncheckedUpdateManyWithoutCompradorInput = {
    idComprador?: IntFieldUpdateOperationsInput | number
    cpfcnpjComprador?: StringFieldUpdateOperationsInput | string
    nomeComprador?: StringFieldUpdateOperationsInput | string
  }

  export type vendedorUpdateWithoutUsuarioInput = {
    idVendedor?: IntFieldUpdateOperationsInput | number
    razaosocialVendedor?: StringFieldUpdateOperationsInput | string
    produto?: produtoUpdateManyWithoutVendedorNestedInput
  }

  export type vendedorUncheckedUpdateWithoutUsuarioInput = {
    idVendedor?: IntFieldUpdateOperationsInput | number
    razaosocialVendedor?: StringFieldUpdateOperationsInput | string
    produto?: produtoUncheckedUpdateManyWithoutVendedorNestedInput
  }

  export type vendedorUncheckedUpdateManyWithoutVendedorInput = {
    idVendedor?: IntFieldUpdateOperationsInput | number
    razaosocialVendedor?: StringFieldUpdateOperationsInput | string
  }

  export type produtoCreateManyVendedorInput = {
    idProduto?: number
    compensa_aoProduto: string
    descProduto?: string | null
    categoriaProduto?: string | null
    precoProduto: string
    quantidadeVendida?: number | null
    createdAt?: Date | string
  }

  export type produtoUpdateWithoutVendedorInput = {
    compensa_aoProduto?: StringFieldUpdateOperationsInput | string
    descProduto?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaProduto?: NullableStringFieldUpdateOperationsInput | string | null
    precoProduto?: StringFieldUpdateOperationsInput | string
    quantidadeVendida?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carrinho?: carrinhoUpdateManyWithoutProdutoNestedInput
  }

  export type produtoUncheckedUpdateWithoutVendedorInput = {
    idProduto?: IntFieldUpdateOperationsInput | number
    compensa_aoProduto?: StringFieldUpdateOperationsInput | string
    descProduto?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaProduto?: NullableStringFieldUpdateOperationsInput | string | null
    precoProduto?: StringFieldUpdateOperationsInput | string
    quantidadeVendida?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carrinho?: carrinhoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type produtoUncheckedUpdateManyWithoutProdutoInput = {
    idProduto?: IntFieldUpdateOperationsInput | number
    compensa_aoProduto?: StringFieldUpdateOperationsInput | string
    descProduto?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaProduto?: NullableStringFieldUpdateOperationsInput | string | null
    precoProduto?: StringFieldUpdateOperationsInput | string
    quantidadeVendida?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}