
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.15.2
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "3.15.2",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Avalia__oScalarFieldEnum = makeEnum({
  idAvalia__o: 'idAvalia__o',
  notaAvaliacao: 'notaAvaliacao',
  comentarioAvaliacao: 'comentarioAvaliacao',
  Comprador_idComprador: 'Comprador_idComprador',
  Comprador_Usuario_idUsuario: 'Comprador_Usuario_idUsuario',
  Produto_idProduto: 'Produto_idProduto',
  Produto_Vendedor_idVendedor: 'Produto_Vendedor_idVendedor',
  Produto_Comprador_idComprador: 'Produto_Comprador_idComprador',
  Produto_Comprador_Usuario_idUsuario: 'Produto_Comprador_Usuario_idUsuario'
});

exports.Prisma.CarrinhoScalarFieldEnum = makeEnum({
  idcarrinho: 'idcarrinho',
  idUsuario: 'idUsuario',
  idProduto: 'idProduto',
  quantidade: 'quantidade'
});

exports.Prisma.CompradorScalarFieldEnum = makeEnum({
  idComprador: 'idComprador',
  cpfcnpjComprador: 'cpfcnpjComprador',
  nomeComprador: 'nomeComprador',
  Usuario_idUsuario: 'Usuario_idUsuario'
});

exports.Prisma.EntregaScalarFieldEnum = makeEnum({
  idEntrega: 'idEntrega',
  prazoEntrega: 'prazoEntrega',
  statusEntrega: 'statusEntrega',
  Pagamento_idPagamento: 'Pagamento_idPagamento'
});

exports.Prisma.PagamentoScalarFieldEnum = makeEnum({
  idPagamento: 'idPagamento',
  valorPagamento: 'valorPagamento',
  formaPagamento: 'formaPagamento',
  statusPagamento: 'statusPagamento',
  Comprador_idComprador: 'Comprador_idComprador',
  Comprador_Usuario_idUsuario: 'Comprador_Usuario_idUsuario'
});

exports.Prisma.ProdutoScalarFieldEnum = makeEnum({
  idProduto: 'idProduto',
  compensa_aoProduto: 'compensa_aoProduto',
  descProduto: 'descProduto',
  categoriaProduto: 'categoriaProduto',
  precoProduto: 'precoProduto',
  Vendedor_idVendedor: 'Vendedor_idVendedor',
  quantidadeVendida: 'quantidadeVendida',
  createdAt: 'createdAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = makeEnum({
  idUsuario: 'idUsuario',
  nomeUsuario: 'nomeUsuario',
  emailUsuario: 'emailUsuario',
  cpfUsuario: 'cpfUsuario'
});

exports.Prisma.VendedorScalarFieldEnum = makeEnum({
  idVendedor: 'idVendedor',
  razaosocialVendedor: 'razaosocialVendedor',
  Usuario_idUsuario: 'Usuario_idUsuario'
});


exports.Prisma.ModelName = makeEnum({
  avalia__o: 'avalia__o',
  carrinho: 'carrinho',
  comprador: 'comprador',
  entrega: 'entrega',
  pagamento: 'pagamento',
  produto: 'produto',
  usuario: 'usuario',
  vendedor: 'vendedor'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
